Filename: /home/dev/scikit_learn_data/20news_home/20news-bydate-test/comp.graphics/38793
Truth category: 0 (comp.graphics)
Assigned cluster: 1 (graphic imag file thank program format gif use bit help)

Raw data:
============ START RAW ==========================
From: jesse@eye.com (Jesse Lackey)
Subject: Re: Fast polygon routine needed
Keywords: polygon, needed
Organization: 3D/EYE, Inc.  Ithaca, NY
Lines: 20

In article <1rguqoINNrc@edna.cc.swin.edu.au> alan@saturn.cs.swin.OZ.AU (Alan Christiansen) writes:
>I believe that the algorithms you can get that will only draw convex
>polygons can be much more efficient than those that can draw
>concave / self intersecting polygons. 
>This efficiency can largely be attributed to the fact that 
>simple convex polygons only have a left and a right edge on each scan line.
>Complex (figure 8 type polygons) can be a bit trickier.

It is true the convex algorithm is faster than a general concave/multi outline
algorithm, but not tremendously faster.  I spent awhile implementing and
optimizing both flavors, and the convex turned out about 10% faster.  This is
all C (on HP PA-RISC the compiler got the inner loop [shooting the span] as
fast as possible, as far as I could tell).  For any sort of game the database
to render is known ahead of time, and can be made all convex.  Definitely the
way to go.

p.s. sorry but my code CANNOT be made public domain....
	jesse
-- 
Jesse Lackey  **  3D/Eye, Inc., Ithaca NY  **  jesse@eye.com  **  (607) 257-1381

========== END RAW ============================

Preprocessed:
============ START PREPROCESSED =================
 fast polygon routin need      believ algorithm
get draw convex polygon much effici draw concav
self intersect polygon effici larg attribut fact
simpl convex polygon left right edg scan line
complex figur type polygon bit trickier  true
convex algorithm faster general concav multi
outlin algorithm tremend faster spent awhil
implement optim flavor convex turn faster risc
compil got inner loop shoot span fast possibl far
could tell sort game databas render known ahead
time made convex definit way  sorri code cannot
made public domain jess
========== END PREPROCESSED =====================


Feature vector (sorted, non-zero values only):
Term, Index, Value:
convex, 2116, 0.493804116571
polygon, 6728, 0.426944277506
faster, 3399, 0.245355793804
concav, 1997, 0.218155556425
algorithm, 407, 0.217375994951
effici, 3006, 0.18233966648
draw, 2861, 0.147962214792
fast, 3397, 0.147103828644
awhil, 837, 0.126237494342
jess, 4857, 0.123198909301
trickier, 9096, 0.120629822255
flavor, 3529, 0.113097003537
risc, 7413, 0.106852333788
tremend, 9082, 0.103133406257
inner, 4656, 0.103133406257
outlin, 6327, 0.100804123012
loop, 5344, 0.100804123012
optim, 6274, 0.0975257341698
span, 8181, 0.0958294159845
intersect, 4722, 0.0924362201901
shoot, 7900, 0.0920033107426
multi, 5917, 0.0899929154517
databas, 2386, 0.0888936549046
compil, 1972, 0.0885427771731
domain, 2805, 0.0875324025789
scan, 7660, 0.0872087792716
attribut, 773, 0.0868913205941
render, 7277, 0.0840107090265
spent, 8223, 0.0824945663977
routin, 7499, 0.0817852646014
complex, 1976, 0.0815553840375
ahead, 342, 0.0808841761474
implement, 4544, 0.0804512666999
edg, 2993, 0.0794157736734
self, 7776, 0.0773416108619
definit, 2484, 0.0720665039102
simpl, 7965, 0.0710637307194
figur, 3476, 0.0708221891488
known, 5054, 0.0666071404918
turn, 9158, 0.0663301356111
left, 5193, 0.0663301356111
code, 1871, 0.0662388144147
type, 9177, 0.0650950464666
general, 3818, 0.0643468176237
sorri, 8142, 0.064265717334
sort, 8144, 0.0641046911861
public, 6973, 0.0640247578115
larg, 5124, 0.0617197615569
true, 9121, 0.0594509723048
fact, 3350, 0.0571876934103
bit, 1122, 0.0562115887306
far, 3386, 0.0556715507815
line, 5285, 0.0552423577074
got, 3960, 0.0546867703719
possibl, 6765, 0.0546412967376
tell, 8767, 0.0544606328909
believ, 1009, 0.0514670305403
right, 7399, 0.0506968437539
game, 3761, 0.0505185952457
need, 5993, 0.0448099163244
way, 9666, 0.0435964200268
time, 8936, 0.039598944341
