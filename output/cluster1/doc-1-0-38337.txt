Filename: /home/dev/scikit_learn_data/20news_home/20news-bydate-train/comp.graphics/38337
Truth category: 0 (comp.graphics)
Assigned cluster: 1 (graphic imag file thank program format gif use bit help)

Raw data:
============ START RAW ==========================
From: greg@cs.uct.ac.za (Gregory Torrance)
Subject: Automatic layout of state diagrams
Organization: Computer Science Department, University of Cape Town
Lines: 18

Hi,

I'm hoping someone out there will be able to help our computer science
project group. We are doing computer science honours, and our project
is to do a 'graphical simulator for a finite state automata'.

Basically, the program must draw a diagram of a FSA from a textual grammar,
showing circles for states, and labeled arc's in-between.

The problem is working out the best way to layout the states, and draw the
arc's in-between so that as few arc's as possible cross each other.

If anyone has any suggestions/algorithms/bug-free ready to compile C code :) 
that might help us, it would be much appreciated.

Thanks in advance,

Gregory

========== END RAW ============================

Preprocessed:
============ START PREPROCESSED =================
 automat layout state diagram      i'm hope someon
abl help comput scienc project group comput scienc
honour project graphic simul finit state automata
basic program must draw diagram fsa textual
grammar show circl state label arc  problem work
best way layout state draw arc arc possibl cross
anyon suggest algorithm bug free readi compil code
might help much appreci  thank advanc  gregori
========== END PREPROCESSED =====================


Feature vector (sorted, non-zero values only):
Term, Index, Value:
arc, 608, 0.400396613248
state, 8342, 0.336293150597
layout, 5161, 0.31389974118
diagram, 2608, 0.307113327127
draw, 2861, 0.210516243664
grammar, 3989, 0.184898136401
textual, 8824, 0.179606956789
scienc, 7692, 0.177233833547
project, 6909, 0.176022942297
gregori, 4035, 0.171628527532
comput, 1993, 0.164415585621
finit, 3489, 0.153556663563
label, 5086, 0.140513965505
help, 4249, 0.139324541399
compil, 1972, 0.125976033005
simul, 7974, 0.125008061921
automat, 803, 0.12407806042
circl, 1765, 0.123183161809
cross, 2241, 0.120292910606
bug, 1373, 0.120292910606
readi, 7139, 0.116693286617
algorithm, 407, 0.103092035995
basic, 937, 0.0975760964187
free, 3668, 0.0965544984777
code, 1871, 0.0942426173801
appreci, 587, 0.091666691877
suggest, 8525, 0.0904213843133
advanc, 285, 0.089661667197
abl, 180, 0.0867504133357
hope, 4372, 0.0847581583252
group, 4064, 0.0825218636106
best, 1052, 0.0792766588399
graphic, 3997, 0.078067286332
possibl, 6765, 0.0777420137588
someon, 8124, 0.0774849706048
problem, 6887, 0.0745999588111
program, 6905, 0.0736025781944
work, 9833, 0.067177752338
thank, 8832, 0.0664042451669
anyon, 554, 0.0637184260665
way, 9666, 0.0620276912869
