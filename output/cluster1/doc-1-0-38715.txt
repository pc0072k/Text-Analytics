Filename: /home/dev/scikit_learn_data/20news_home/20news-bydate-train/comp.graphics/38715
Truth category: 0 (comp.graphics)
Assigned cluster: 1 (graphic imag file thank program format gif use bit help)

Raw data:
============ START RAW ==========================
From: squeegee@world.std.com (Stephen C. Gilardi)
Subject: Need PostScript strokeadjust info
Summary: Seeking algorithm for endpoint "snapping"
Keywords: postscript emulation adjust stroke strokeadjust
Organization: SQ Software via The World Public Access UNIX, Brookline, MA
Lines: 31

I need information on the Display PostScript strokeadjust feature.
This feature adjusts the endpoints of lines so that the displayed line
looks better on low resolution devices.

The PostScript literature explains the process to some extent.  They
also give an example of how to "emulate" strokeadjust in PostScript
environments where it is absent.

The suggested emulation is to modify the coordinates of the endpoints
of a line using the following formula for each coordinate:

	new_coord = (round (old_coord - 0.25)) + 0.25
	
Doing this we end up with all coordinates ending in ".25".  From
reading I thought that what they might actually do is:

	new_coord = ((trunc (old_coord * 2)) / 2) + 0.25
	
This results in all the coordinates ending in either "0.25" or "0.75" 
whichever is closer.

By doing some actual comparisons with Display PostScript, I find that
neither of these is what DPS really uses.  Since I like how the DPS
result looks better than how my stuff looks, I'd like to know if
anyone who knows how DPS does it is willing/able to tell me.

Thanks,

--Steve
squeegee@world.std.com


========== END RAW ============================

Preprocessed:
============ START PREPROCESSED =================
 need postscript strokeadjust info seek algorithm
endpoint snap     need inform display postscript
strokeadjust featur featur adjust endpoint line
display line look better low resolut devic
postscript literatur explain process extent also
give exampl emul strokeadjust postscript environ
absent  suggest emul modifi coordin endpoint line
use follow formula coordin  new coord round old
coord  end coordin end read thought might actual
new coord trunc old coord  result coordin end
either whichev closer  actual comparison display
postscript find neither dps realli use sinc like
dps result look better stuff look i'd like know
anyon know dps will abl tell  thank  steve
========== END PREPROCESSED =====================


Feature vector (sorted, non-zero values only):
Term, Index, Value:
postscript, 6772, 0.445649048526
endpoint, 3098, 0.356108035832
dps, 2851, 0.356108035832
coordin, 2126, 0.344460354263
emul, 3082, 0.209965858935
display, 2734, 0.202571771316
end, 3091, 0.162075127423
line, 5285, 0.155835218375
featur, 3422, 0.146813486245
absent, 192, 0.122199632204
result, 7332, 0.121629827185
old, 6216, 0.118515231874
look, 5341, 0.117328072152
whichev, 9729, 0.109491286761
snap, 8074, 0.109491286761
actual, 254, 0.100774353828
better, 1060, 0.0937644187009
new, 6023, 0.0913000743797
formula, 3614, 0.0901095861124
extent, 3321, 0.0886619744209
round, 7494, 0.0869189221029
literatur, 5307, 0.0857281227772
comparison, 1962, 0.084621452412
need, 5993, 0.084270638034
seek, 7766, 0.0835878041119
devic, 2591, 0.0835878041119
adjust, 269, 0.0811244988186
closer, 1831, 0.0797609158442
resolut, 7316, 0.0762639622508
modifi, 5814, 0.0750578812874
environ, 3139, 0.0728928833759
steve, 8390, 0.0698402935475
use, 9363, 0.0692215222228
algorithm, 407, 0.0681337796423
know, 5052, 0.0675114998188
like, 5272, 0.0659954982508
low, 5368, 0.0645871546344
process, 6890, 0.0633480466447
explain, 3301, 0.0633480466447
info, 4636, 0.0616969084798
stuff, 8472, 0.0600540205484
suggest, 8525, 0.0597597148438
abl, 180, 0.0573335611138
exampl, 3258, 0.056841871585
thought, 8887, 0.054696404232
inform, 4637, 0.0515085175939
follow, 3578, 0.0515085175939
tell, 8767, 0.0512100072697
sinc, 7977, 0.047772302587
read, 7135, 0.0477046078027
realli, 7150, 0.046502279999
thank, 8832, 0.0438867286287
anyon, 554, 0.0421116641926
