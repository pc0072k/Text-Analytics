Filename: /home/dev/scikit_learn_data/20news_home/20news-bydate-test/comp.graphics/38777
Truth category: 0 (comp.graphics)
Assigned cluster: 1 (graphic imag file thank program format gif use bit help)

Raw data:
============ START RAW ==========================
From: alan@saturn.cs.swin.OZ.AU (Alan Christiansen)
Subject: Re: Fast polygon routine needed
Organization: Swinburne University of Technology
Lines: 49
NNTP-Posting-Host: saturn.cs.swin.oz.au
Keywords: polygon, needed

osprey@ux4.cso.uiuc.edu (Lucas Adamski) writes:

>In article <7306@pdxgate.UUCP> idr@rigel.cs.pdx.edu (Ian D Romanick) writes:
>>What kind of polygons?  Shaded?  Texturemapped?  Hm?  More comes into play with
>>fast routines than just "polygons".  It would be nice to know exaclty what
>>system (VGA is a start, but what processor?) and a few of the specifics of the
>>implementation.  You need to give  more info if you want to get any answers! :P

>I don't want texture mapped, cause if I did I'd asked for them. :)  Just
>a simple and fast routine to do filled polygons.  As for the processor, it'd
>be for a minimum of a 286... maybe 386 if I can't find a good one for 286s.
>Ideally, I want a polyn function that can clip to a user-defined viewport,
>and write to an arbitrary location in memory.  Of course the chances of

Ok It is for a game that is 3d and you have listed the characteristics 
that you are looking for. I think you may have left out a few 
important parameters. 
The polygons are all convex. 
They have less than N sides. (you are drawing meshes walls doors etc.)

I believe that the algorithms you can get that will only draw convex
polygons can be much more efficient than those that can draw
concave / self intersecting polygons. 
This efficiency can largely be attributed to the fact that 
simple convex polygons only have a left and a right edge on each scan line.
Complex (figure 8 type polygons) can be a bit trickier.

The less than N sides specification especially if it is a very small 
number like 3 or 4 allow othe optimisations to be made.

Thus for a high speed game application I think you are looking for
code that exploits and is hence limited to drawing simple convex
polygons.  

>finding something like that are pretty remote, so I guess I'd need the source
>with it.  Oh, and I guess it would need to be in ASM otherwise it'd be too
>slow.  I've seen some polygon routines in C, and they've all been waaay too
>slow.  Its for a 3D vector graphics program.  I've been hunting high and low

It may have been that they were very general purpose algorithms.
If you limit yourself to 3 or four sided simple convex polygons
I think you might be suprised how fast a c algorithm with a 
asm block move to fill each scan line might actually be.


>for a polyn function in ASM, and I can't find one anywhere that I can use.
>I've found one or two polyn functions, but my ASM is pretty bad, so I won't
>even try to rewrite them. :)
>		//Lucas.

========== END RAW ============================

Preprocessed:
============ START PREPROCESSED =================
 fast polygon routin need         kind polygon
shade texturemap come play fast routin polygon
nice know exaclti system vga start processor
specif implement need give info want get answer
don't want textur map caus i'd ask simpl fast
routin fill polygon processor it'd minimum mayb
can't find good one 286s ideal want polyn function
clip user defin viewport write arbitrari locat
memori cours chanc  game list characterist look
think left import paramet polygon convex less side
draw mesh wall door etc  believ algorithm get draw
convex polygon much effici draw concav self
intersect polygon effici larg attribut fact simpl
convex polygon left right edg scan line complex
figur type polygon bit trickier  less side specif
especi small number like allow oth optimis made
thus high speed game applic think look code
exploit henc limit draw simpl convex polygon  find
someth like pretti remot guess i'd need sourc
guess need asm otherwis it'd slow i'v seen polygon
routin they'v waaay slow vector graphic program
i'v hunt high low  general purpos algorithm limit
four side simpl convex polygon think might supris
fast algorithm asm block move fill scan line might
actual   polyn function asm can't find one anywher
use i'v found one two polyn function asm pretti
bad won't even tri rewrit luca
========== END PREPROCESSED =====================


Feature vector (sorted, non-zero values only):
Term, Index, Value:
polygon, 6728, 0.59384049616
convex, 2116, 0.286181844095
asm, 692, 0.265861644779
polyn, 6732, 0.234282836215
routin, 7499, 0.189593055692
draw, 2861, 0.171501605858
fast, 3397, 0.17050665858
simpl, 7965, 0.164738598348
function, 3722, 0.135728931098
algorithm, 407, 0.125979231459
processor, 6891, 0.106640168632
effici, 3006, 0.10567409273
need, 5993, 0.103877501682
scan, 7660, 0.101082872482
slow, 8044, 0.0956186728594
limit, 5278, 0.0844516585676
want, 9634, 0.0789327579596
left, 5193, 0.0768826337864
specif, 8203, 0.0766715115532
viewport, 9514, 0.0753156306632
texturemap, 8826, 0.0753156306632
guess, 4079, 0.0748685725474
exaclti, 3252, 0.0731603437729
pretti, 6851, 0.0708276391256
trickier, 9096, 0.0699104438934
luca, 5377, 0.0699104438934
rewrit, 7369, 0.0686206980851
supris, 8583, 0.0674830616571
think, 8871, 0.0663642596274
high, 4292, 0.0653286159973
line, 5285, 0.0640308951276
concav, 1997, 0.0632155113153
mesh, 5648, 0.061925765507
hunt, 4443, 0.060788129079
exploit, 3306, 0.0597704786168
game, 3761, 0.0585556266679
arbitrari, 604, 0.056871844576
vector, 9444, 0.0558541941137
characterist, 1663, 0.0558541941137
henc, 4252, 0.0555374855427
door, 2818, 0.0555374855427
textur, 8825, 0.055230832929
ideal, 4483, 0.054933617293
remot, 7271, 0.054365291847
clip, 1821, 0.054093196501
shade, 7835, 0.0535709749422
intersect, 4722, 0.0535709749422
paramet, 6421, 0.0530755460387
anywher, 557, 0.0521549692179
minimum, 5740, 0.0515178979584
block, 1163, 0.0511153919675
attribut, 773, 0.0503574545635
wall, 9619, 0.0488425529647
look, 5341, 0.0482087525646
vga, 9492, 0.047533353482
complex, 1976, 0.0472650377275
implement, 4544, 0.046625151738
edg, 2993, 0.0460250366439
self, 7776, 0.0448229653804
memori, 5628, 0.0437540747659
otherwis, 6313, 0.0433047497496
map, 5498, 0.0433047497496
locat, 5323, 0.0427917754352
defin, 2482, 0.0423841729289
applic, 585, 0.042304676628
chanc, 1649, 0.0419930771532
user, 9366, 0.0416912167727
purpos, 6993, 0.0415437521369
won, 9820, 0.0411846495869
figur, 3476, 0.0410446653102
like, 5272, 0.0406751843851
especi, 3190, 0.0399923334963
low, 5368, 0.0398071761453
speed, 8217, 0.0392720934048
nice, 6047, 0.0391001230573
caus, 1569, 0.0391001230573
code, 1871, 0.038388392125
info, 4636, 0.0380258228958
type, 9177, 0.0377255268114
small, 8054, 0.0376274676338
general, 3818, 0.0372918943185
allow, 432, 0.0370132573223
import, 4551, 0.0366098171716
seen, 7767, 0.0358502231778
larg, 5124, 0.0357693963795
sourc, 8153, 0.0356494104138
answer, 535, 0.0356494104138
bad, 861, 0.0355702399211
list, 5298, 0.035375107102
kind, 5021, 0.0344545302813
mayb, 5564, 0.0338092423084
ask, 689, 0.0334544571597
write, 9865, 0.0332974009183
fact, 3350, 0.0331428576848
cours, 2190, 0.0330513049043
bit, 1122, 0.0325771608267
play, 6681, 0.0318531118765
graphic, 3997, 0.0317996006813
number, 6156, 0.0314074461692
actual, 254, 0.0310552653733
start, 8334, 0.0305734325058
program, 6905, 0.0299809652118
believ, 1009, 0.0298274745306
right, 7399, 0.0293811164153
someth, 8126, 0.028432256277
come, 1923, 0.0280086399424
tri, 9087, 0.0279726669175
good, 3948, 0.0248284972587
don, 2811, 0.021908279419
use, 9363, 0.0213317442436
know, 5052, 0.0208047728711
