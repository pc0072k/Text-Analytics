Filename: /home/dev/scikit_learn_data/20news_home/20news-bydate-train/comp.graphics/38699
Truth category: 0 (comp.graphics)
Assigned cluster: 1 (graphic imag file thank program format gif use bit help)

Raw data:
============ START RAW ==========================
From: pinky@tamu.edu (The Man behind The Curtain)
Subject: Views on isomorphic perspectives?
Organization: Texas A&M University
Lines: 87
NNTP-Posting-Host: tamsun.tamu.edu
Keywords: isomorphic perspectives

                             
I'm working upon a game using an isometric perspective, similar to
that used in Populous.  Basically, you look into a room that looks
similar to the following:

                             xxxx
                         xxxxx   xxxx
                     xxxx    x       xxxx
                 xxxx        x           xxxx
             xxxx     2      xxxx     1      xxxx
             x           xxxx    xxxx           x
             x       xxxx            xxxx       x
             x   xxxx             o      xxxx   x
             xxxx              3 /|\         xxxx
                 xxxx            /~\     xxxx
                     xxxx            xxxx
                         xxxx    xxxx
                             xxxx

The good thing about this perspective is that you can look and move
around in three dimensions and still maintain your peripheral vision. [*]

Since your viewpoint is always the same, the routines can be hard-coded
for a particular vantage.  In my case, wall two's rising edge has a slope
of 1/4. (I'm also using Mode X, 320x240).

I've run into two problems; I'm sure that other readers have tried this
before, and have perhaps formulated their own opinions:

1) The routines for drawing walls 1 & 2 were trivial, but when I ran a
packed->planar image through them, I was dismayed by the "jaggies."  I'm
now considered some anti-aliasing routines (speed is not really necessary).
Is it worth the effort to have the artist draw the wall already skewed,
thus being assured of nice image, or is this too much of a burden?

2) Wall 3 presents a problem; the algorithm I used tends to overly distort
the original.  I tried to decide on paper what pixels go where, and failed.
Has anyone come up with method for mapping a planar to crosswise sheared
shape?

Currently I take:

  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16
 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32
 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48
 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64

and produce:
            
             1  2  3  4
33 34 35 36 17 18 19 20  5  6  7  8
49 50 51 52 37 38 39 40 21 22 23 24  9 10 11 12
            53 54 55 56 41 42 43 44 25 26 27 28 13 14 15 16
                        57 58 59 60 45 46 47 48 29 30 31 32
                                    61 62 63 64

Line 1 follows the slope.  Line 2 is directly under line 1.
Line 3 moves up a line and left 4 pixels.  Line 4 is under line 3.
This fills the shape exactly without any unfilled pixels.  But
it causes distortions.  Has anyone come up with a better way?
Perhaps it is necessary to simply draw the original bitmap
already skewed?

Are there any other particularly sticky problems with this perspective?
I was planning on having hidden plane removal by using z-buffering.
Locations are stored in (x,y,z) form.

[*] For those of you who noticed, the top lines of wall 2 (and wall 1)
*are* parallel with its bottom lines.  This is why there appears to
be an optical illusion (ie. it appears to be either the inside or outside
of a cube, depending on your mood).  There are no vanishing points.
This simplifies the drawing code for objects (which don't have to
change size as they move about in the room).  I've decided that this
approximation is alright, since small displacements at a large enough
distance cause very little change in the apparent size of an object in
a real perspective drawing.

Hopefully the "context" of the picture (ie. chairs on the floor, torches
hanging on the walls) will dispell any visual ambiguity.

Thanks in advance for any help.

-- 
Till next time,                \o/   \o/
                                V \o/ V     email:pinky@tamu.edu
<>  Sam  Inala  <>                 V


========== END RAW ============================

Preprocessed:
============ START PREPROCESSED =================
 view isomorph perspect       i'm work upon game
use isometr perspect similar use popul basic look
room look similar follow  xxxx xxxxx xxxx xxxx
xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx
xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx
xxxx  good thing perspect look move around three
dimens still maintain peripher vision  sinc
viewpoint alway routin hard code particular vantag
case wall two rise edg slope i'm also use mode
320x240  i'v run two problem i'm sure reader tri
perhap formul opinion  routin draw wall trivial
ran pack planar imag dismay jaggi i'm consid anti
alias routin speed realli necessari worth effort
artist draw wall alreadi skew thus assur nice imag
much burden  wall present problem algorithm use
tend over distort origin tri decid paper pixel
fail anyon come method map planar crosswis shear
shape  current take       produc         line
follow slope line direct line line move line left
pixel line line fill shape exact without unfil
pixel caus distort anyon come better way perhap
necessari simpli draw origin bitmap alreadi skew
particular sticki problem perspect plan hidden
plane remov use buffer locat store form  notic top
line wall wall parallel bottom line appear optic
illus appear either insid outsid cube depend mood
vanish point simplifi draw code object don't chang
size move room i'v decid approxim alright sinc
small displac larg enough distanc caus littl chang
appar size object real perspect draw  hope context
pictur chair floor torch hang wall dispel visual
ambigu  thank advanc help   till next time  sam
inala
========== END PREPROCESSED =====================


Feature vector (sorted, non-zero values only):
Term, Index, Value:
wall, 9619, 0.373507620499
line, 5285, 0.314778569729
perspect, 6564, 0.289912903873
draw, 2861, 0.234196971506
skew, 8004, 0.159848587868
pixel, 6651, 0.159568200482
planar, 6661, 0.156000970879
routin, 7499, 0.15534123744
slope, 8041, 0.149929881706
distort, 2748, 0.134022683217
use, 9363, 0.116519722922
shape, 7853, 0.109244683688
room, 7476, 0.105719263295
necessari, 5990, 0.103855983159
problem, 6887, 0.0995899458813
size, 8000, 0.0979340357171
decid, 2442, 0.091418646614
particular, 6442, 0.0883548028347
similar, 7961, 0.0873795516161
appear, 580, 0.0858058935983
caus, 1569, 0.0854301542868
alreadi, 443, 0.0845786020462
code, 1871, 0.0838750879953
xxxxx, 9920, 0.0822788452396
dismay, 2723, 0.0822788452396
320x240, 90, 0.0822788452396
perhap, 6540, 0.0816862400476
sticki, 8394, 0.0799242939342
shear, 7865, 0.0799242939342
mood, 5850, 0.0799242939342
isometr, 4786, 0.0799242939342
ambigu, 462, 0.0799242939342
look, 5341, 0.0789987507878
object, 6173, 0.0777176859527
vantag, 9424, 0.0763739285337
torch, 8999, 0.0763739285337
displac, 2733, 0.0763739285337
chang, 1650, 0.075824097801
origin, 6293, 0.0750509905739
alright, 445, 0.0749649408531
vanish, 9421, 0.0716047019222
formul, 3613, 0.0716047019222
imag, 4512, 0.070740367592
peripher, 6547, 0.0706865810531
illus, 4510, 0.0706865810531
follow, 3578, 0.0693629149482
chair, 1638, 0.0690600241471
viewpoint, 9513, 0.0683320297477
alias, 410, 0.0658377183384
trivial, 9110, 0.0652964851612
cube, 2284, 0.0652964851612
simplifi, 7969, 0.0647816643472
sam, 7599, 0.0647816643472
sinc, 7977, 0.0643316157406
assur, 712, 0.0638217543795
floor, 3549, 0.0633726766666
burden, 1406, 0.0625280873395
artist, 669, 0.0625280873395
till, 8933, 0.0621298614531
pack, 6374, 0.0621298614531
dimens, 2652, 0.0621298614531
come, 1923, 0.061196289028
tri, 9087, 0.061117691294
hang, 4152, 0.0610181253612
popul, 6745, 0.06033713208
ran, 7089, 0.0600124377357
optic, 6273, 0.0596974372218
hidden, 4286, 0.0596974372218
buffer, 1371, 0.0596974372218
bitmap, 1126, 0.0590943168666
rise, 7414, 0.0585238139519
anyon, 554, 0.0567088302705
reader, 7137, 0.056507849993
parallel, 6420, 0.055214182953
approxim, 593, 0.0546223418438
visual, 9547, 0.0538815652096
vision, 9542, 0.0537042209747
store, 8417, 0.0535298081841
anti, 542, 0.0533582314999
context, 2087, 0.0528596316477
tend, 8783, 0.0523835328352
distanc, 2744, 0.0516348690197
plane, 6663, 0.0512099095654
maintain, 5454, 0.0505375972667
remov, 7272, 0.0504081265185
edg, 2993, 0.0502802251515
outsid, 6332, 0.0501538555742
fail, 3360, 0.0501538555742
insid, 4671, 0.0494258611748
effort, 3007, 0.0493092662471
appar, 577, 0.0489670178585
notic, 6120, 0.0487448678936
mode, 5806, 0.0484201735492
worth, 9850, 0.0477993042688
method, 5666, 0.0475020526801
map, 5498, 0.0473084374573
depend, 2537, 0.0471183109876
paper, 6409, 0.0470245171826
produc, 6895, 0.0467480367297
locat, 5323, 0.0467480367297
algorithm, 407, 0.0458754957742
pictur, 6622, 0.0445400396357
basic, 937, 0.0434209272879
simpli, 7967, 0.0432236928802
plan, 6660, 0.043094222132
speed, 8217, 0.0429029467992
nice, 6047, 0.0427150771434
form, 3610, 0.0422893010231
present, 6837, 0.0422298544795
left, 5193, 0.0419953618606
exact, 3253, 0.04188004122
view, 9510, 0.0412133942817
small, 8054, 0.0411062691627
direct, 2667, 0.0404352727876
hard, 4167, 0.0399466793217
advanc, 285, 0.0398990416174
alway, 457, 0.0398516180158
opinion, 6266, 0.0395254899147
larg, 5124, 0.0390764122017
current, 2299, 0.0382318228747
hope, 4372, 0.0377170020606
consid, 2059, 0.0370070602466
case, 1540, 0.0366867469419
real, 7144, 0.0361735955739
littl, 5308, 0.035463425053
sure, 8585, 0.0339805535481
game, 3761, 0.0319846577802
run, 7543, 0.0317845135241
better, 1060, 0.0315664947436
realli, 7150, 0.0313106826127
help, 4249, 0.0309993994613
work, 9833, 0.0298937998823
point, 6710, 0.0297838849968
thank, 8832, 0.0295495926443
thing, 8869, 0.0288263523489
way, 9666, 0.0276020457064
good, 3948, 0.0271239856255
time, 8936, 0.0250711382025
don, 2811, 0.0239337826147
