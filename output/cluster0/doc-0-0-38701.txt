Filename: /home/dev/scikit_learn_data/20news_home/20news-bydate-train/comp.graphics/38701
Truth category: 0 (comp.graphics)
Assigned cluster: 0 (space orbit like use launch know moon think time shuttl)

Raw data:
============ START RAW ==========================
From: spl@dim.ucsd.edu (Steve Lamont)
Subject: Re: Finding equally spaced points on a sphere.
Organization: University of Calif., San Diego/Microscopy and Imaging Resource
Lines: 326
NNTP-Posting-Host: dim.ucsd.edu

In article <4615trd@rpi.edu> deweeset@ptolemy2.rdrc.rpi.edu (Thomas E. DeWeese) writes:
>  Hello, I know that this has been discussed before.  But at the time
>I didn't need to teselate a sphere.  So if any kind soul has the code
>or the alg, that was finally decided upon as the best (as I recall it
>was a nice, iterative subdivision meathod), I would be very 
>appreciative.

Here is one by Andrew "Graphics Gems" Glassner that I got from a
collegue of mine.  I think I fiddled with it a little bit to make it
deal with whatever bizarre problem I was working on at the time but it
is known to work.

							spl
			       - - - -
/* spheres
    ASG     9 Feb 85
    spl Thu Mar  8 17:17:40 EST 1990
*/
#include <stdio.h>
#include <math.h>

#define PI 3.141592654

struct Point_struct {
        double x, y, z;
};

static double radius;
static double xorg;
static double yorg;
static double zorg;

do_sphere( r, freq, x, y, z )

  double r;
  int freq;
  double x;
  double y;
  double z;

  {

    int pole;
    double northy, southy, poley;
    double rtheta, rtheta2, ntheta, ntheta2, magicangle;
    double theta, thetastart, thisy, den, t;
    struct Point_node *pnp;
    struct Point_struct p1, p2, p3, p4, n1, n2, n3, n4, pt;

    radius = r;
    xorg = x;
    yorg = y;
    zorg = z;

/* north pole */

    magicangle = 30.0*PI/180.0;
    northy = radius*sin(magicangle);
    southy = -radius*sin(magicangle);
    for (pole=0; pole<2; pole++) {

      if (pole==0) {

        poley=radius;   
        thisy=northy; 
        thetastart=0.0; 

      }
      else { 

        poley= -radius; 
        thisy=southy; 
        thetastart=36.0; 

      }
      for ( theta = thetastart; theta < 360.0; theta += 60.0 ) {

        rtheta = theta*PI/180.0;
        rtheta2 = (theta+60.0)*PI/180.0;
        p1.x = 0.0;  
        p1.y = poley;  
        p1.z = 0.0;  
        p2.x = radius*cos(rtheta);
        p2.y = thisy;
        p2.z = radius*sin(rtheta);
        p3.x = radius*cos(rtheta2);
        p3.y = thisy;
        p3.z = radius*sin(rtheta2);

        if (pole==0) {

/* make ring go the other way so normals are right */

          pt.x = p3.x;  
          pt.y = p3.y;  
          pt.z = p3.z;  
          p3.x = p2.x;  
          p3.y = p2.y;  
          p3.z = p2.z;  
          p2.x = pt.x;  
          p2.y = pt.y;  
          p2.z = pt.z;  

        }

        den = (p1.x*p1.x)+(p1.y*p1.y)+(p1.z*p1.z);  
        den = sqrt(den);

        if (den != 0.0) {

          t = radius / den; 
          p1.x *= t;  
          p1.y *= t;  
          p1.z *= t;

        }

        den = (p2.x*p2.x)+(p2.y*p2.y)+(p2.z*p2.z);  
        den = sqrt(den);

        if (den != 0.0) {

          t = radius / den; 
          p2.x *= t;  
          p2.y *= t;  
          p2.z *= t;

        }

        den = (p3.x*p3.x)+(p3.y*p3.y)+(p3.z*p3.z);  
        den = sqrt(den);

        if (den != 0.0) {

          t = radius / den; 
          p3.x *= t;  
          p3.y *= t;  
          p3.z *= t;

        }

        subdivide_tri(&p1,&p2,&p3,freq);

      }

    }

/* now the body */

    for (theta=0.0; theta<360.0; theta += 60.0) {

      rtheta = theta*PI/180.0;  
      rtheta2 = (theta+60.0)*PI/180.0;
      ntheta = (theta+36.0)*PI/180.0; 
      ntheta2 = (theta+96.0)*PI/180.0;
      p1.x = radius*cos(rtheta);   
      p1.y = northy;  
      p1.z = radius*sin(rtheta);
      p2.x = radius*cos(rtheta2);  
      p2.y = northy;  
      p2.z = radius*sin(rtheta2);
      p3.x = radius*cos(ntheta);   
      p3.y = southy;  
      p3.z = radius*sin(ntheta);
      p4.x = radius*cos(ntheta2);  
      p4.y = southy;  
      p4.z = radius*sin(ntheta2);

      den = (p1.x*p1.x)+(p1.y*p1.y)+(p1.z*p1.z);  
      den = sqrt(den);

      if (den != 0.0) {

        t = radius / den; 
        p1.x *= t;  
        p1.y *= t;  
        p1.z *= t;

      }

      den = (p2.x*p2.x)+(p2.y*p2.y)+(p2.z*p2.z);  
      den = sqrt(den);

      if (den != 0.0) {

        t = radius / den; 
        p2.x *= t;  
        p2.y *= t;  
        p2.z *= t;

      }
      den = (p3.x*p3.x)+(p3.y*p3.y)+(p3.z*p3.z);  
      den = sqrt(den);
      if (den != 0.0) {

        t = radius / den; 
        p3.x *= t;  
        p3.y *= t;  
        p3.z *= t;

      }
      den = (p4.x*p4.x)+(p4.y*p4.y)+(p4.z*p4.z);  
      den = sqrt(den);
      if (den != 0.0) {

        t = radius / den; 
        p4.x *= t;  
        p4.y *= t;  
        p4.z *= t;

      }

      subdivide_tri(&p1,&p2,&p3,freq);
      subdivide_tri(&p3,&p2,&p4,freq);

    }

    return;

  }

#define norm_pt(v) { register double r = sqrt( ( ( v )->x * ( v )->x ) + \
                                               ( ( v )->y * ( v )->y ) + \
                                               ( ( v )->z * ( v )->z ) ); \
                     ( v )->x /= r; \
                     ( v )->y /= r; \
                     ( v )->z /= r; \
                    }

subdivide_tri(p1,p2,p3,a)

  struct Point_struct *p1, *p2, *p3;
  int a;

  {

    struct Point_struct n1, n2, n3;
    struct Point_struct p12, p13, p23;
    double den, t;

    if (a>0) {

      p12.x = (p1->x+p2->x)/2.0;
      p12.y = (p1->y+p2->y)/2.0;
      p12.z = (p1->z+p2->z)/2.0;
      den = (p12.x*p12.x)+(p12.y*p12.y)+(p12.z*p12.z);  
      den = sqrt(den);
      if (den != 0.0) {

        t = radius / den;
        p12.x *= t;  
        p12.y *= t;  
        p12.z *= t;

      }
      p13.x = (p1->x+p3->x)/2.0;
      p13.y = (p1->y+p3->y)/2.0;
      p13.z = (p1->z+p3->z)/2.0;
      den = (p13.x*p13.x)+(p13.y*p13.y)+(p13.z*p13.z); 
      den = sqrt(den);
      if (den != 0.0) {

        t = radius / den;
        p13.x *= t;  
        p13.y *= t;  
        p13.z *= t;

      }
      p23.x = (p2->x+p3->x)/2.0;
      p23.y = (p2->y+p3->y)/2.0;
      p23.z = (p2->z+p3->z)/2.0;
      den = (p23.x*p23.x)+(p23.y*p23.y)+(p23.z*p23.z);  
      den = sqrt(den);
      if (den != 0.0) {

        t = radius / den;
        p23.x *= t;  
        p23.y *= t;  
        p23.z *= t;

      }
      subdivide_tri(p1,  &p12,&p13,a-1);
      subdivide_tri(&p12, p2, &p23,a-1);
      subdivide_tri(&p13,&p23, p3, a-1);
      subdivide_tri(&p12,&p23,&p13,a-1);

    } else {

      n1.x = p1->x;  
      n1.y = p1->y;  
      n1.z = p1->z;  
      norm_pt(&n1);
      n2.x = p2->x;  
      n2.y = p2->y;  
      n2.z = p2->z;  
      norm_pt(&n2);
      n3.x = p3->x;  
      n3.y = p3->y;  
      n3.z = p3->z;  
      norm_pt(&n3);

/* nothing special about this poly */

      printf( "%f %f %f  %f %f %f\n", p1->x + xorg,
                                      p1->y + yorg,
                                      p1->z + zorg,
                                      n1.x, n1.y, n1.z );
      printf( "%f %f %f  %f %f %f\n", p2->x + xorg,
                                      p2->y + yorg,
                                      p2->z + zorg,
                                      n2.x, n2.y, n2.z );
      printf( "%f %f %f  %f %f %f\n", p3->x + xorg,
                                      p3->y + yorg,
                                      p3->z + zorg,
                                      n3.x, n3.y, n3.z );

    }

    return;

  }
-- 
Steve Lamont, SciViGuy -- (619) 534-7968 -- spl@szechuan.ucsd.edu
San Diego Microscopy and Imaging Resource/UC San Diego/La Jolla, CA 92093-0608
"My other car is a car, too."
                 - Bumper strip seen on I-805

========== END RAW ============================

Preprocessed:
============ START PREPROCESSED =================
 find equal space point sphere      hello know
discuss time didn't need tesel sphere kind soul
code alg final decid upon best recal nice iter
subdivis meathod appreci  one andrew graphic gem
glassner got collegu mine think fiddl littl bit
make deal whatev bizarr problem work time known
work  spl  sphere asg spl thu est  includ stdio
includ math  defin  struct point struct doubl
static doubl radius static doubl xorg static doubl
yorg static doubl zorg  sphere freq  doubl int
freq doubl doubl doubl    int pole doubl northi
southi poley doubl rtheta rtheta2 ntheta ntheta2
magicangl doubl theta thetastart thisi den struct
point node pnp struct point struct  radius xorg
yorg zorg  north pole  magicangl northi radius sin
magicangl southi radius sin magicangl pole pole
pole  pole  poley radius thisi northi thetastart
els  poley radius thisi southi thetastart   theta
thetastart theta theta  rtheta theta rtheta2 theta
poley  radius cos rtheta thisi radius sin rtheta
radius cos rtheta2 thisi radius sin rtheta2  pole
make ring way normal right              den den
sqrt den  den  radius den       den den sqrt den
den  radius den       den den sqrt den  den
radius den       subdivid tri freq      bodi
theta theta theta  rtheta theta rtheta2 theta
ntheta theta ntheta2 theta radius cos rtheta
northi radius sin rtheta radius cos rtheta2 northi
radius sin rtheta2 radius cos ntheta southi radius
sin ntheta radius cos ntheta2 southi radius sin
ntheta2  den den sqrt den  den  radius den
den den sqrt den  den  radius den      den den
sqrt den den  radius den      den den sqrt den den
radius den       subdivid tri freq subdivid tri
freq    return    defin norm regist doubl sqrt
subdivid tri  struct point struct int    struct
point struct struct point struct p12 p13 p23 doubl
den    p12 p12 p12 den p12 p12 p12 p12 p12 p12 den
sqrt den den  radius den p12 p12 p12   p13 p13 p13
den p13 p13 p13 p13 p13 p13 den sqrt den den
radius den p13 p13 p13   p23 p23 p23 den p23 p23
p23 p23 p23 p23 den sqrt den den  radius den p23
p23 p23   subdivid tri p12 p13 subdivid tri p12
p23 subdivid tri p13 p23 subdivid tri p12 p23 p13
els     norm    norm    norm  noth special poli
printf xorg yorg zorg  printf xorg yorg zorg
printf xorg yorg zorg     return     san diego
microscopi imag resourc san diego jolla car car
bumper strip seen
========== END PREPROCESSED =====================


Feature vector (sorted, non-zero values only):
Term, Index, Value:
den, 2521, 0.835038980823
radius, 7064, 0.344547360862
theta, 8861, 0.233197514184
sqrt, 8274, 0.190300157775
doubl, 2828, 0.14480980463
subdivid, 8485, 0.143506162575
pole, 6717, 0.0953473038403
cos, 2162, 0.0903339637319
sin, 7976, 0.0856784480692
norm, 6107, 0.0642337677556
static, 8345, 0.060222642488
tri, 9087, 0.0514026142653
sphere, 8226, 0.0483328645995
int, 4691, 0.045166981866
point, 6710, 0.0438366806558
spl, 8242, 0.0315243741747
car, 1510, 0.0249754352568
diego, 2629, 0.0223672897452
san, 7603, 0.0200585788091
defin, 2482, 0.019471304778
return, 7346, 0.0189527506454
fiddl, 3464, 0.0173000143432
bumper, 1397, 0.0168049445445
subdivis, 8486, 0.0164004430659
glassner, 3894, 0.0160584419389
iter, 4799, 0.0157621870873
thu, 8903, 0.0155008717887
els, 3053, 0.0153399884222
includ, 4579, 0.0152683029938
microscopi, 5691, 0.0152671172886
est, 3197, 0.0152671172886
poli, 6719, 0.0148626158101
jolla, 4885, 0.014520614683
node, 6089, 0.0140898570903
bizarr, 1131, 0.0136210434058
strip, 8451, 0.013234220234
gem, 3813, 0.0131472045418
regist, 7229, 0.0130634732555
andrew, 505, 0.0130634732555
work, 9833, 0.0125709874812
soul, 8149, 0.0121914627768
ring, 7406, 0.0119800061102
math, 5544, 0.0117869612983
make, 5459, 0.0111291645451
north, 6110, 0.0110470715613
hello, 4247, 0.0109818134521
recal, 7166, 0.010887390021
resourc, 7320, 0.010545388894
equal, 3156, 0.010545388894
time, 8936, 0.0105429542489
normal, 6108, 0.0101585657222
special, 8198, 0.00988741175661
whatev, 9718, 0.00968131622614
decid, 2442, 0.00961087806383
bodi, 1194, 0.00961087806383
nice, 6047, 0.00898130552393
deal, 2418, 0.0089682930775
known, 5054, 0.00886685297473
code, 1871, 0.00881782079666
final, 3482, 0.00871130678655
appreci, 587, 0.0085768040454
discuss, 2708, 0.00853372277417
seen, 7767, 0.00823480291837
noth, 6119, 0.00807305080795
kind, 5021, 0.00791421200097
bit, 1122, 0.00748297988879
littl, 5308, 0.00745656748451
imag, 4512, 0.0074369625049
best, 1052, 0.00741752924995
didn, 2625, 0.00741108914164
graphic, 3997, 0.00730437417906
got, 3960, 0.00727999354079
problem, 6887, 0.00697995330055
right, 7399, 0.00674884789423
space, 8164, 0.00629325114624
need, 5993, 0.00596517035447
way, 9666, 0.0058036277154
think, 8871, 0.00508129425159
know, 5052, 0.00477886019022
