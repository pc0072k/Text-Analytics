Filename: /home/dev/scikit_learn_data/20news_home/20news-bydate-test/comp.graphics/39638
Truth category: 0 (comp.graphics)
Assigned cluster: 1 (graphic imag file thank program format gif use bit help)

Raw data:
============ START RAW ==========================
From: tgl+@cs.cmu.edu (Tom Lane)
Subject: JPEG image compression: Frequently Asked Questions
Summary: Useful info about JPEG (JPG) image files and programs
Keywords: JPEG, image compression, FAQ
Supersedes: <jpeg-faq_736398890@g.gp.cs.cmu.edu>
Nntp-Posting-Host: g.gp.cs.cmu.edu
Reply-To: jpeg-info@uunet.uu.net
Organization: School of Computer Science, Carnegie Mellon
Expires: Mon, 14 Jun 1993 03:21:00 GMT
Lines: 1041

Archive-name: jpeg-faq
Last-modified: 16 May 1993

This FAQ article discusses JPEG image compression.  Suggestions for
additions and clarifications are welcome.

New since version of 2 May 1993:
  * Added info on ImageViewer for NeXT.


This article includes the following sections:

[1]  What is JPEG?
[2]  Why use JPEG?
[3]  When should I use JPEG, and when should I stick with GIF?
[4]  How well does JPEG compress images?
[5]  What are good "quality" settings for JPEG?
[6]  Where can I get JPEG software?
    [6A] "canned" software, viewers, etc.
    [6B] source code
[7]  What's all this hoopla about color quantization?
[8]  How does JPEG work?
[9]  What about lossless JPEG?
[10]  Why all the argument about file formats?
[11]  How do I recognize which file format I have, and what do I do about it?
[12]  What about arithmetic coding?
[13]  Does loss accumulate with repeated compression/decompression?
[14]  What are some rules of thumb for converting GIF images to JPEG?

Sections 1-6 are basic info that every JPEG user needs to know;
sections 7-14 are advanced info for the curious.

This article is posted every 2 weeks.  You can always find the latest version
in the news.answers archive at rtfm.mit.edu (18.70.0.226).  By FTP, fetch
/pub/usenet/news.answers/jpeg-faq; or if you don't have FTP, send e-mail to
mail-server@rtfm.mit.edu with body "send usenet/news.answers/jpeg-faq".
Many other FAQ articles are also stored in this archive.  For more
instructions on use of the archive, send e-mail to the same address with the
words "help" and "index" (no quotes) on separate lines.  If you don't get a
reply, the server may be misreading your return address; add a line such as
"path myname@mysite" to specify your correct e-mail address to reply to.


----------


[1]  What is JPEG?

JPEG (pronounced "jay-peg") is a standardized image compression mechanism.
JPEG stands for Joint Photographic Experts Group, the original name of the
committee that wrote the standard.  JPEG is designed for compressing either
full-color or gray-scale digital images of "natural", real-world scenes.
It does not work so well on non-realistic images, such as cartoons or line
drawings.

JPEG does not handle black-and-white (1-bit-per-pixel) images, nor does it
handle motion picture compression.  Standards for compressing those types
of images are being worked on by other committees, named JBIG and MPEG
respectively.

JPEG is "lossy", meaning that the image you get out of decompression isn't
quite identical to what you originally put in.  The algorithm achieves much
of its compression by exploiting known limitations of the human eye, notably
the fact that small color details aren't perceived as well as small details
of light-and-dark.  Thus, JPEG is intended for compressing images that will
be looked at by humans.  If you plan to machine-analyze your images, the
small errors introduced by JPEG may be a problem for you, even if they are
invisible to the eye.

A useful property of JPEG is that the degree of lossiness can be varied by
adjusting compression parameters.  This means that the image maker can trade
off file size against output image quality.  You can make *extremely* small
files if you don't mind poor quality; this is useful for indexing image
archives, making thumbnail views or icons, etc. etc.  Conversely, if you
aren't happy with the output quality at the default compression setting, you
can jack up the quality until you are satisfied, and accept lesser compression.


[2]  Why use JPEG?

There are two good reasons: to make your image files smaller, and to store
24-bit-per-pixel color data instead of 8-bit-per-pixel data.

Making image files smaller is a big win for transmitting files across
networks and for archiving libraries of images.  Being able to compress a
2 Mbyte full-color file down to 100 Kbytes or so makes a big difference in
disk space and transmission time!  (If you are comparing GIF and JPEG, the
size ratio is more like four to one.  More details below.)

If your viewing software doesn't support JPEG directly, you'll have to
convert JPEG to some other format for viewing or manipulating images.  Even
with a JPEG-capable viewer, it takes longer to decode and view a JPEG image
than to view an image of a simpler format (GIF, for instance).  Thus, using
JPEG is essentially a time/space tradeoff: you give up some time in order to
store or transmit an image more cheaply.

It's worth noting that when network or phone transmission is involved, the
time savings from transferring a shorter file can be much greater than the
extra time to decompress the file.  I'll let you do the arithmetic yourself.

The other reason why JPEG will gradually replace GIF as a standard Usenet
posting format is that JPEG can store full color information: 24 bits/pixel
(16 million colors) instead of 8 or less (256 or fewer colors).  If you have
only 8-bit display hardware then this may not seem like much of an advantage
to you.  Within a couple of years, though, 8-bit GIF will look as obsolete as
black-and-white MacPaint format does today.  Furthermore, for reasons detailed
in section 7, JPEG is far more useful than GIF for exchanging images among
people with widely varying color display hardware.  Hence JPEG is considerably
more appropriate than GIF for use as a Usenet posting standard.


[3]  When should I use JPEG, and when should I stick with GIF?

JPEG is *not* going to displace GIF entirely; for some types of images,
GIF is superior in image quality, file size, or both.  One of the first
things to learn about JPEG is which kinds of images to apply it to.

As a rule of thumb, JPEG is superior to GIF for storing full-color or
gray-scale images of "realistic" scenes; that means scanned photographs and
similar material.  JPEG is superior even if you don't have 24-bit display
hardware, and it is a LOT superior if you do.  (See section 7 for details.)

GIF does significantly better on images with only a few distinct colors,
such as cartoons and line drawings.  In particular, large areas of pixels
that are all *exactly* the same color are compressed very efficiently indeed
by GIF.  JPEG can't squeeze these files as much as GIF does without
introducing visible defects.  This sort of image is best kept in GIF form.
(In particular, single-color borders are quite cheap in GIF files, but they
should be avoided in JPEG files.)

JPEG also has a hard time with very sharp edges: a row of pure-black pixels
adjacent to a row of pure-white pixels, for example.  Sharp edges tend to
come out blurred unless you use a very high quality setting.  Again, this
sort of thing is not found in scanned photographs, but it shows up fairly
often in GIF files: borders, overlaid text, etc.  The blurriness is
particularly objectionable with text that's only a few pixels high.
If you have a GIF with a lot of small-size overlaid text, don't JPEG it.

Computer-drawn images (ray-traced scenes, for instance) usually fall between
scanned images and cartoons in terms of complexity.  The more complex and
subtly rendered the image, the more likely that JPEG will do well on it.
The same goes for semi-realistic artwork (fantasy drawings and such).

Plain black-and-white (two level) images should never be converted to JPEG.
You need at least about 16 gray levels before JPEG is useful for gray-scale
images.  It should also be noted that GIF is lossless for gray-scale images
of up to 256 levels, while JPEG is not.

If you have an existing library of GIF images, you may wonder whether you
should convert them to JPEG.  You will lose a little image quality if you do.
(Section 7, which argues that JPEG image quality is superior to GIF, only
applies if both formats start from a full-color original.  If you start from
a GIF, you've already irretrievably lost a great deal of information; JPEG
can only make things worse.)  However, the disk space savings may justify
converting anyway.  This is a decision you'll have to make for yourself.
If you do convert a GIF library to JPEG, see section 14 for hints.  Be
prepared to leave some images in GIF format, since some GIFs will not
convert well.


[4]  How well does JPEG compress images?

Pretty darn well.  Here are some sample file sizes for an image I have
handy, a 727x525 full-color image of a ship in a harbor.  The first three
files are for comparison purposes; the rest were created with the free JPEG
software described in section 6B.

File	   Size in bytes		Comments

ship.ppm	1145040  Original file in PPM format (no compression; 24 bits
			 or 3 bytes per pixel, plus a few bytes overhead)
ship.ppm.Z	 963829  PPM file passed through Unix compress
			 compress doesn't accomplish a lot, you'll note.
			 Other text-oriented compressors give similar results.
ship.gif	 240438  Converted to GIF with ppmquant -fs 256 | ppmtogif
			 Most of the savings is the result of losing color
			 info: GIF saves 8 bits/pixel, not 24.  (See sec. 7.)

ship.jpg95	 155622  cjpeg -Q 95    (highest useful quality setting)
			 This is indistinguishable from the 24-bit original,
			 at least to my nonprofessional eyeballs.
ship.jpg75	  58009  cjpeg -Q 75    (default setting)
			 You have to look mighty darn close to distinguish this
			 from the original, even with both on-screen at once.
ship.jpg50	  38406  cjpeg -Q 50
			 This has slight defects; if you know what to look
			 for, you could tell it's been JPEGed without seeing
			 the original.  Still as good image quality as many
			 recent postings in Usenet pictures groups.
ship.jpg25	  25192  cjpeg -Q 25
			 JPEG's characteristic "blockiness" becomes apparent
			 at this setting (djpeg -blocksmooth helps some).
			 Still, I've seen plenty of Usenet postings that were
			 of poorer image quality than this.
ship.jpg5o	   6587  cjpeg -Q 5 -optimize  (-optimize cuts table overhead)
			 Blocky, but perfectly satisfactory for preview or
			 indexing purposes.  Note that this file is TINY:
			 the compression ratio from the original is 173:1 !

In this case JPEG can make a file that's a factor of four or five smaller
than a GIF of comparable quality (the -Q 75 file is every bit as good as the
GIF, better if you have a full-color display).  This seems to be a typical
ratio for real-world scenes.


[5]  What are good "quality" settings for JPEG?

Most JPEG compressors let you pick a file size vs. image quality tradeoff by
selecting a quality setting.  There seems to be widespread confusion about
the meaning of these settings.  "Quality 95" does NOT mean "keep 95% of the
information", as some have claimed.  The quality scale is purely arbitrary;
it's not a percentage of anything.

The name of the game in using JPEG is to pick the lowest quality setting
(smallest file size) that decompresses into an image indistinguishable from
the original.  This setting will vary from one image to another and from one
observer to another, but here are some rules of thumb.

The default quality setting (-Q 75) is very often the best choice.  This
setting is about the lowest you can go without expecting to see defects in a
typical image.  Try -Q 75 first; if you see defects, then go up.  Except for
experimental purposes, never go above -Q 95; saying -Q 100 will produce a
file two or three times as large as -Q 95, but of hardly any better quality.

If the image was less than perfect quality to begin with, you might be able to
go down to -Q 50 without objectionable degradation.  On the other hand, you
might need to go to a HIGHER quality setting to avoid further degradation.
The second case seems to apply much of the time when converting GIFs to JPEG.
The default -Q 75 is about right for compressing 24-bit images, but -Q 85 to
95 is usually better for converting GIFs (see section 14 for more info).

If you want a very small file (say for preview or indexing purposes) and are
prepared to tolerate large defects, a -Q setting in the range of 5 to 10 is
about right.  -Q 2 or so may be amusing as "op art".

(Note: the quality settings discussed in this article apply to the free JPEG
software described in section 6B, and to many programs based on it.  Other
JPEG implementations, such as Image Alchemy, may use a completely different
quality scale.  Some programs don't even provide a numeric scale, just
"high"/"medium"/"low"-style choices.)


[6]  Where can I get JPEG software?

Most of the programs described in this section are available by FTP.
If you don't know how to use FTP, see the FAQ article "How to find sources".
(If you don't have direct access to FTP, read about ftpmail servers in the
same article.)  That article appears regularly in news.answers, or you can
get it by sending e-mail to mail-server@rtfm.mit.edu with
"send usenet/news.answers/finding-sources" in the body.  The "Anonymous FTP
List FAQ" may also be helpful --- it's usenet/news.answers/ftp-list/faq in
the news.answers archive.

NOTE: this list changes constantly.  If you have a copy more than a couple
months old, get the latest JPEG FAQ from the news.answers archive.


[6A]  If you are looking for "canned" software, viewers, etc:

The first part of this list is system-specific programs that only run on one
kind of system.  If you don't see what you want for your machine, check out
the portable JPEG software described at the end of the list.  Note that this
list concentrates on free and shareware programs that you can obtain over
Internet; but some commercial programs are listed too.

X Windows:

XV (shareware, $25) is an excellent viewer for JPEG, GIF, and many other
image formats.  It can also do format conversion and some simple image
manipulations.  It's available for FTP from export.lcs.mit.edu (18.24.0.12),
file contrib/xv-3.00.tar.Z.  Version 3.00 is a major upgrade with support
for 24-bit displays and many other improvements; however, it is brand new
and still has some bugs lurking.  If you prefer not to be on the bleeding
edge, stick with version 2.21, also available from export.  Note that
version 2.21 is not a good choice if you have a 24-bit display (you'll get
only 8-bit color), nor for converting 24-bit images to JPEG.  But 2.21 works
fine for converting GIF and other 8-bit images to JPEG.  CAUTION: there is a
glitch in version 2.21: be sure to check the "save at normal size" checkbox
when saving a JPEG file, or the file will be blurry.

Another good choice for X Windows is John Cristy's free ImageMagick package,
also available from export.lcs.mit.edu, file contrib/ImageMagick.tar.Z.
This package handles many image processing and conversion tasks.  The
ImageMagick viewer handles 24-bit displays correctly; for colormapped
displays, it does better (though slower) color quantization than XV or the
basic free JPEG software.

Both of the above are large, complex packages.  If you just want a simple
image viewer, try xloadimage or xli.  xloadimage supports JPEG in its latest
release, 3.03.  xloadimage is free and available from export.lcs.mit.edu,
file contrib/xloadimage-3.03.tar.Z.  xli is a variant version of xloadimage,
said by its fans to be somewhat faster and more robust than the original.
(The current xli is indeed faster and more robust than the current
xloadimage, at least with respect to JPEG files, because it has the IJG v4
decoder while xloadimage 3.03 is using a hacked-over v1.  The next
xloadimage release will fix this.)  xli is also free and available from
export.lcs.mit.edu, file contrib/xli.1.14.tar.Z.  Both programs are said
to do the right thing with 24-bit displays.


MS-DOS:

This covers plain DOS; for Windows or OS/2 programs, see the next headings.

One good choice is Eric Praetzel's free DVPEG, which views JPEG and GIF files.
The current version, 2.5, is available by FTP from sunee.uwaterloo.ca
(129.97.50.50), file pub/jpeg/viewers/dvpeg25.zip.  This is a good basic
viewer that works on either 286 or 386/486 machines.  The user interface is
not flashy, but it's functional.

Another freeware JPEG/GIF/TGA viewer is Mohammad Rezaei's Hiview.  The
current version, 1.2, is available from Simtel20 and mirror sites (see NOTE
below), file msdos/graphics/hv12.zip.  Hiview requires a 386 or better CPU
and a VCPI-compatible memory manager (QEMM386 and 386MAX work; Windows and
OS/2 do not).  Hiview is currently the fastest viewer for images that are no
bigger than your screen.  For larger images, it scales the image down to fit
on the screen (rather than using panning/scrolling as most viewers do).
You may or may not prefer this approach, but there's no denying that it
slows down loading of large images considerably.  Note: installation is a
bit tricky; read the directions carefully!

A shareware alternative is ColorView for DOS ($30).  This is easier to
install than either of the two freeware alternatives.  Its user interface is
also much spiffier-looking, although personally I find it harder to use ---
more keystrokes, inconsistent behavior.  It is faster than DVPEG but a
little slower than Hiview, at least on my hardware.  (For images larger than
screen size, DVPEG and ColorView seem to be about the same speed, and both
are faster than Hiview.)  The current version is 2.1, available from
Simtel20 and mirror sites (see NOTE below), file msdos/graphics/dcview21.zip.
Requires a VESA graphics driver; if you don't have one, look in vesadrv2.zip
or vesa-tsr.zip from the same directory.  (Many recent PCs have a built-in
VESA driver, so don't try to load a VESA driver unless ColorView complains
that the driver is missing.)

A second shareware alternative is Fullview, which has been kicking around
the net for a while, but I don't know any stable archive location for it.
The current (rather old) version is inferior to the above viewers anyway.
The author tells me that a new version of Fullview will be out shortly
and it will be submitted to the Simtel20 archives at that time.

The well-known GIF viewer CompuShow (CSHOW) supports JPEG in its latest
revision, 8.60a.  However, CSHOW's JPEG implementation isn't very good:
it's slow (about half the speed of the above viewers) and image quality is
poor except on hi-color displays.  Too bad ... it'd have been nice to see a
good JPEG capability in CSHOW.  Shareware, $25.  Available from Simtel20 and
mirror sites (see NOTE below), file msdos/gif/cshw860a.zip.

Due to the remarkable variety of PC graphics hardware, any one of these
viewers might not work on your particular machine.  If you can't get *any*
of them to work, you'll need to use one of the following conversion programs
to convert JPEG to GIF, then view with your favorite GIF viewer.  (If you
have hi-color hardware, don't use GIF as the intermediate format; try to
find a TARGA-capable viewer instead.  VPIC5.0 is reputed to do the right
thing with hi-color displays.)

The Independent JPEG Group's free JPEG converters are FTPable from Simtel20
and mirror sites (see NOTE below), file msdos/graphics/jpeg4.zip (or
jpeg4386.zip if you have a 386 and extended memory).  These files are DOS
compilations of the free source code described in section 6B; they will
convert JPEG to and from GIF, Targa, and PPM formats.

Handmade Software offers free JPEG<=>GIF conversion tools, GIF2JPG/JPG2GIF.
These are slow and are limited to conversion to and from GIF format; in
particular, you can't get 24-bit color output from a JPEG.  The major
advantage of these tools is that they will read and write HSI's proprietary
JPEG format as well as the Usenet-standard JFIF format.  Since HSI-format
files are rather widespread on BBSes, this is a useful capability.  Version
2.0 of these tools is free (prior versions were shareware).  Get it from
Simtel20 and mirror sites (see NOTE below), file msdos/graphics/gif2jpg2.zip.
NOTE: do not use HSI format for files to be posted on Internet, since it is
not readable on non-PC platforms.

Handmade Software also has a shareware image conversion and manipulation
package, Image Alchemy.  This will translate JPEG files (both JFIF and HSI
formats) to and from many other image formats.  It can also display images.
A demo version of Image Alchemy version 1.6.2 is available from Simtel20 and
mirror sites (see NOTE below), file msdos/graphics/alch162.zip.

NOTE ABOUT SIMTEL20: The Internet's key archive site for PC-related programs
is Simtel20, full name wsmr-simtel20.army.mil (192.88.110.20).  Simtel20
runs a non-Unix system with weird directory names; where this document
refers to directory (eg) "msdos/graphics" at Simtel20, that really means
"pd1:<msdos.graphics>".  If you are not physically on MILnet, you should
expect rather slow FTP transfer rates from Simtel20.  There are several
Internet sites that maintain copies (mirrors) of the Simtel20 archives;
most FTP users should go to one of the mirror sites instead.  A popular USA
mirror site is oak.oakland.edu (141.210.10.117), which keeps Simtel20 files
in (eg) "/pub/msdos/graphics".  If you have no FTP capability, you can
retrieve files from Simtel20 by e-mail; see informational postings in
comp.archives.msdos.announce to find out how.  If you are outside the USA,
consult the same newsgroup to learn where your nearest Simtel20 mirror is.

Microsoft Windows:

There are several Windows programs capable of displaying JPEG images.
(Windows viewers are generally slower than DOS viewers on the same hardware,
due to Windows' system overhead.  Note that you can run the DOS conversion
programs described above inside a Windows DOS window.)

The newest entry is WinECJ, which is free and EXTREMELY fast.  Version 1.0
is available from ftp.rahul.net, file /pub/bryanw/pc/jpeg/wecj.zip.
Requires Windows 3.1 and 256-or-more-colors mode.  This is a no-frills
viewer with the bad habit of hogging the machine completely while it
decodes; and the image quality is noticeably worse than other viewers.
But it's so fast you'll use it anyway, at least for previewing...

JView is freeware, fairly fast, has good on-line help, and can write out the
decompressed image in Windows BMP format; but it can't create new JPEG
files, and it doesn't view GIFs.  JView also lacks some other useful
features of the shareware viewers (such as brightness adjustment), but it's
an excellent basic viewer.  The current version, 0.9, is available from
ftp.cica.indiana.edu (129.79.20.84), file pub/pc/win3/desktop/jview090.zip.
(Mirrors of this archive can be found at some other Internet sites,
including wuarchive.wustl.edu.)

WinJPEG (shareware, $20) displays JPEG,GIF,Targa,TIFF, and BMP image files;
it can write all of these formats too, so it can be used as a converter.
It has some other nifty features including color-balance adjustment and
slideshow.  The current version is 2.1, available from Simtel20 and mirror
sites (see NOTE above), file msdos/windows3/winjp210.zip.  (This is a slow
286-compatible version; if you register, you'll get the 386-only version,
which is roughly 25% faster.)

ColorView is another shareware entry ($30).  This was an early and promising
contender, but it has not been updated in some time, and at this point it
has no real advantages over WinJPEG.  If you want to try it anyway, the
current version is 0.97, available from ftp.cica.indiana.edu, file
pub/pc/win3/desktop/cview097.zip.  (I understand that a new version will
be appearing once the authors are finished with ColorView for DOS.)

DVPEG (see DOS heading) also works under Windows, but only in full-screen
mode, not in a window.

OS/2:

The following files are available from hobbes.nmsu.edu (128.123.35.151).
Note: check /pub/uploads for more recent versions --- the hobbes moderator
is not very fast about moving uploads into their permanent directories.
/pub/os2/2.x/graphics/jpegv4.zip
    32-bit version of free IJG conversion programs, version 4.
/pub/os2/all/graphics/jpeg4-16.zip
    16-bit version of same, for OS/2 1.x.
/pub/os2/2.x/graphics/imgarc12.zip
    Image Archiver 1.02: image conversion/viewing with PM graphical interface.
    Strong on conversion functions, viewing is a bit weaker.  Shareware, $15.
/pub/os2/2.x/graphics/pmjpeg11.zip
    PMJPEG 1.1: OS/2 2.x port of WinJPEG, a popular viewer for Windows
    (see description in Windows section).  Shareware, $20.
/pub/os2/2.x/graphics/pmview85.zip
    PMView 0.85: JPEG/GIF/BMP/Targa/PCX viewer.  GIF viewing very fast,
    JPEG viewing roughly the same speed as the above two programs.  Has
    image manipulation & slideshow functions.  Shareware, $20.

Macintosh:

Most Mac JPEG programs rely on Apple's JPEG implementation, which is part of
the QuickTime system extension; so you need to have QuickTime installed.
To use QuickTime, you need a 68020 or better CPU and you need to be running
System 6.0.7 or later.  (If you're running System 6, you must also install
the 32-bit QuickDraw extension; this is built-in on System 7.)  You can get
QuickTime by FTP from ftp.apple.com, file dts/mac/quicktime/quicktime.hqx.
(As of 11/92, this file contains QuickTime 1.5, which is better than QT 1.0
in several ways.  With respect to JPEG, it is marginally faster and
considerably less prone to crash when fed a corrupt JPEG file.  However,
some applications seem to have compatibility problems with QT 1.5.)

Mac users should keep in mind that QuickTime's JPEG format, PICT/JPEG, is
not the same as the Usenet-standard JFIF JPEG format.  (See section 10 for
details.)  If you post images on Usenet, make sure they are in JFIF format.
Most of the programs mentioned below can generate either format.

The first choice is probably JPEGView, a free program for viewing images
that are in JFIF format, PICT/JPEG format, or GIF format.  It also can
convert between the two JPEG formats.  The current version, 2.0, is a big
improvement over prior versions.  Get it from sumex-aim.stanford.edu
(36.44.0.6), file /info-mac/app/jpeg-view-20.hqx.  Requires System 7 and
QuickTime.  On 8-bit displays, JPEGView usually produces the best color
image quality of all the currently available Mac JPEG viewers.  JPEGView can
view large images in much less memory than other Mac viewers; in fact, it's
the only one that can deal with JPEG images much over 640x480 pixels on a
typical 4MB Mac.  Given a large image, JPEGView automatically scales it down
to fit on the screen, rather than presenting scroll bars like most other
viewers.  (You can zoom in on any desired portion, though.)  Some people
like this behavior, some don't.  Overall, JPEGView's user interface is very
well thought out.

GIFConverter, a shareware ($40) image viewer/converter, supports JFIF and
PICT/JPEG, as well as GIF and several other image formats.  The latest
version is 2.3.2.  Get it from sumex-aim.stanford.edu, file
/info-mac/art/gif/gif-converter-232.hqx.  Requires System 6.0.5 or later.
GIFConverter is not better than JPEGView as a plain JPEG/GIF viewer, but
it has much more extensive image manipulation and format conversion
capabilities, so you may find it worth its shareware fee if you do a lot of
playing around with images.  Also, the newest version of GIFConverter can
load and save JFIF images *without* QuickTime, so it is your best bet if
your machine is too old to run QuickTime.  (But it's faster with QuickTime.)
Note: If GIFConverter runs out of memory trying to load a large JPEG, try
converting the file to GIF with JPEG Convert, then viewing the GIF version.

JPEG Convert, a Mac version of the free IJG JPEG conversion utilities, is
available from sumex-aim.stanford.edu, file /info-mac/app/jpeg-convert-10.hqx.
This will run on any Mac, but it only does file conversion, not viewing.
You can use it in conjunction with any GIF viewer.

Previous versions of this FAQ recommended Imagery JPEG v0.6, a JPEG<=>GIF
converter based on an old version of the IJG code.  If you are using this
program, you definitely should replace it with JPEG Convert.

Apple's free program PictPixie can view images in JFIF, QuickTime JPEG, and
GIF format, and can convert between these formats.  You can get PictPixie
from ftp.apple.com, file dts/mac/quicktime/qt.1.0.stuff/pictpixie.hqx.
Requires QuickTime.  PictPixie was intended as a developer's tool, and it's
really not the best choice unless you like to fool around with QuickTime.
Some of its drawbacks are that it requires lots of memory, it produces
relatively poor color image quality on anything less than a 24-bit display,
and it has a relatively unfriendly user interface.  Worse, PictPixie is an
unsupported program, meaning it has some minor bugs that Apple does not
intend to fix.  (There is an old version of PictPixie, called
PICTCompressor, floating around the net.  If you have this you should trash
it, as it's even buggier.  Also, the QuickTime Starter Kit includes a much
cleaned-up descendant of PictPixie called Picture Compressor.  Note that
Picture Compressor is NOT free and may not be distributed on the net.)

Storm Technology's Picture Decompress is a free JPEG viewer/converter.
This rather old program is inferior to the above programs in many ways, but
it will run without System 7 or QuickTime, so you may be forced to use it on
older systems.  (It does need 32-bit QuickDraw, so really old machines can't
use it.)  You can get it from sumex-aim.stanford.edu, file
/info-mac/app/picture-decompress-201.hqx.  You must set the file type of a
downloaded image file to 'JPEG' to allow Picture Decompress to open it.

If your machine is too old to run 32-bit QuickDraw (a Mac Plus for instance),
GIFConverter is your only choice for single-program JPEG viewing.  If you
don't want to pay for GIFConverter, use JPEG Convert and a free GIF viewer.

More and more commercial Mac applications are supporting JPEG, although not
all can deal with the Usenet-standard JFIF format.  Adobe Photoshop, version
2.0.1 or later, can read and write JFIF-format JPEG files (use the JPEG
plug-in from the Acquire menu).  You must set the file type of a downloaded
JPEG file to 'JPEG' to allow Photoshop to recognize it.

Amiga:

(Most programs listed in this section are stored in the AmiNet archive at
amiga.physik.unizh.ch (130.60.80.80).  There are many mirror sites of this
archive and you should try to use the closest one.  In the USA, a good
choice is wuarchive.wustl.edu; look under /mirrors/amiga.physik.unizh.ch/...)

HamLab Plus is an excellent JPEG viewer/converter, as well as being a
general image manipulation tool.  It's cheap (shareware, $20) and can read
several formats besides JPEG.  The current version is 2.0.8.  A demo version
is available from amiga.physik.unizh.ch (and mirror sites), file
amiga/gfx/edit/hamlab208d.lha.  The demo version will crop images larger
than 512x512, but it is otherwise fully functional.

Rend24 (shareware, $30) is an image renderer that can display JPEG, ILBM,
and GIF images.  The program can be used to create animations, even
capturing frames on-the-fly from rendering packages like Lightwave.  The
current version is 1.05, available from amiga.physik.unizh.ch (and mirror
sites), file amiga/os30/gfx/rend105.lha.  (Note: although this directory is
supposedly for AmigaDOS 3.0 programs, the program will also run under
AmigaDOS 1.3, 2.04 or 2.1.)

Viewtek is a free JPEG/ILBM/GIF/ANIM viewer.  The current version is 1.04,
available from amiga.physik.unizh.ch (and mirror sites), file
amiga/gfx/show/ViewTek104.lha.

If you're willing to spend real money, there are several commercial packages
that support JPEG.  Two are written by Thomas Krehbiel, the author of Rend24
and Viewtek.  These are CineMorph, a standalone image morphing package, and
ImageFX, an impressive 24-bit image capture, conversion, editing, painting,
effects and prepress package that also includes CineMorph.  Both are
distributed by Great Valley Products.  Art Department Professional (ADPro),
from ASDG Inc, is the most widely used commercial image manipulation
software for Amigas.  ImageMaster, from Black Belt Systems, is another
well-regarded commercial graphics package with JPEG support.

The free IJG JPEG software is available compiled for Amigas from
amiga.physik.unizh.ch (and mirror sites) in directory amiga/gfx/conv, file
AmigaJPEGV4.lha.  These programs convert JPEG to/from PPM,GIF,Targa formats.

The Amiga world is heavily infested with quick-and-dirty JPEG programs, many
based on an ancient beta-test version of the free IJG JPEG software (thanks
to a certain magazine that published same on its disk-of-the-month, without
so much as notifying the authors).  Among these are "AugJPEG", "NewAmyJPEG",
"VJPEG", and probably others I have not even heard of.  In my opinion,
anything older than IJG version 3 (March 1992) is not worth the disk space
it's stored on; if you have such a program, trash it and get something newer.

Atari ST:

The free IJG JPEG software is available compiled for Atari ST, TT, etc,
from atari.archive.umich.edu, file /atari/Graphics/jpeg4bin.zoo.
These programs convert JPEG to/from PPM, GIF, Targa formats.

For monochrome ST monitors, try MGIF, which manages to achieve four-level
grayscale effect by flickering.  Version 4.1 reads JPEG files.  Available
from atari.archive.umich.edu, file /atari/Graphics/mgif41b.zoo.

I have not heard of any other free or shareware JPEG-capable viewers for
Ataris, but surely there must be some by now?  Pointers appreciated.

Acorn Archimedes:

!ChangeFSI, supplied with RISC OS 3 version 3.10, can convert from and view
JPEG JFIF format.  Provision is also made to convert images to JPEG,
although this must be done from the CLI rather than by double-clicking.

Recent versions (since 7.11) of the shareware program Translator can handle
JPEG, along with about 30 other image formats.  While older versions can be
found on some Archimedes bboards, the current version is only available by
registering with the author, John Kortink, Nutterbrink 31, 7544 WJ, Enschede,
The Netherlands.  Price 35 Dutch guilders (about $22 or 10 pounds).

There's also a commercial product called !JPEG which provides JPEG read/write
functionality and direct JPEG viewing, as well as a host of other image
format conversion and processing options.  This is more expensive but not
necessarily better than the above programs.  Contact: DT Software, FREEPOST,
Cambridge, UK.  Tel: 0223 841099.

NeXT:

ImageViewer is a PD utility that displays images and can do some format
conversions.  The current version reads JPEG but does not write it.
ImageViewer is available from the standard NeXT archives at
sonata.cc.purdue.edu and cs.orst.edu, somewhere in /pub/next (both are
currently being re-organized, so it's hard to point to specific
sub-directories).  Note that there is an older version floating around that
does not support JPEG.


Portable software for almost any system:

If none of the above fits your situation, you can obtain and compile the free
JPEG conversion software described in 6B.  You'll also need a viewer program.
If your display is 8 bits or less, any GIF viewer will do fine; if you have a
display with more color capability, try to find a viewer that can read Targa
or PPM 24-bit image files.

There are numerous commercial JPEG offerings, with more popping up every
day.  I recommend that you not spend money on one of these unless you find
the available free or shareware software vastly too slow.  In that case,
purchase a hardware-assisted product.  Ask pointed questions about whether
the product complies with the final JPEG standard and about whether it can
handle the JFIF file format; many of the earliest commercial releases are
not and never will be compatible with anyone else's files.


[6B]  If you are looking for source code to work with:

Free, portable C code for JPEG compression is available from the Independent
JPEG Group, which I lead.  A package containing our source code,
documentation, and some small test files is available from several places.
The "official" archive site for this source code is ftp.uu.net (137.39.1.9
or 192.48.96.9).  Look under directory /graphics/jpeg; the current release
is jpegsrc.v4.tar.Z.  (This is a compressed TAR file; don't forget to
retrieve in binary mode.)  You can retrieve this file by FTP or UUCP.
If you are on a PC and don't know how to cope with .tar.Z format, you may
prefer ZIP format, which you can find at Simtel20 and mirror sites (see NOTE
above), file msdos/graphics/jpegsrc4.zip.  This file will also be available on
CompuServe, in the GRAPHSUPPORT forum (GO PICS), library 15, as jpsrc4.zip.
If you have no FTP access, you can retrieve the source from your nearest
comp.sources.misc archive; version 4 appeared as issues 55-72 of volume 34.
(If you don't know how to retrieve comp.sources.misc postings, see the FAQ
article "How to find sources", referred to at the top of section 6.)

The free JPEG code provides conversion between JPEG "JFIF" format and image
files in GIF, PBMPLUS PPM/PGM, Utah RLE, and Truevision Targa file formats.
The core compression and decompression modules can easily be reused in other
programs, such as image viewers.  The package is highly portable; we have
tested it on many machines ranging from PCs to Crays.

We have released this software for both noncommercial and commercial use.
Companies are welcome to use it as the basis for JPEG-related products.
We do not ask a royalty, although we do ask for an acknowledgement in
product literature (see the README file in the distribution for details).
We hope to make this software industrial-quality --- although, as with
anything that's free, we offer no warranty and accept no liability.

The Independent JPEG Group is a volunteer organization; if you'd like to
contribute to improving our software, you are welcome to join.


[7]  What's all this hoopla about color quantization?

Most people don't have full-color (24 bit per pixel) display hardware.
Typical display hardware stores 8 or fewer bits per pixel, so it can display
256 or fewer distinct colors at a time.  To display a full-color image, the
computer must map the image into an appropriate set of representative
colors.  This process is called "color quantization".  (This is something
of a misnomer, "color selection" would be a better term.  We're stuck with
the standard usage though.)

Clearly, color quantization is a lossy process.  It turns out that for most
images, the details of the color quantization algorithm have MUCH more impact
on the final image quality than do any errors introduced by JPEG (except at
the very lowest JPEG quality settings).

Since JPEG is a full-color format, converting a color JPEG image for display
on 8-bit-or-less hardware requires color quantization.  This is true for
*all* color JPEGs: even if you feed a 256-or-less-color GIF into JPEG, what
comes out of the decompressor is *not* 256 colors, but thousands of colors.
This happens because JPEG's lossiness affects each pixel a little
differently, so two pixels that started with identical colors will probably
come out with slightly different colors.  Each original color gets "smeared"
into a group of nearby colors.  Therefore quantization is always required to
display a color JPEG on a colormapped display, regardless of the image
source.  The only way to avoid quantization is to ask for gray-scale output.

(Incidentally, because of this effect it's nearly meaningless to talk about
the number of colors used by a JPEG image.  Even if you attempted to count
the number of distinct pixel values, different JPEG decoders would give you
different results because of roundoff error differences.  I occasionally see
posted images described as "256-color JPEG".  This tells me that the poster
(a) hasn't read this FAQ and (b) probably converted the JPEG from a GIF.
JPEGs can be classified as color or gray-scale (just like photographs), but
number of colors just isn't a useful concept for JPEG.)

On the other hand, a GIF image by definition has already been quantized to
256 or fewer colors.  (A GIF *does* have a definite number of colors in its
palette, and the format doesn't allow more than 256 palette entries.)
For purposes of Usenet picture distribution, GIF has the advantage that the
sender precomputes the color quantization, so recipients don't have to.
This is also the *disadvantage* of GIF: you're stuck with the sender's
quantization.  If the sender quantized to a different number of colors than
what you can display, you have to re-quantize, resulting in much poorer
image quality than if you had quantized once from a full-color image.
Furthermore, if the sender didn't use a high-quality color quantization
algorithm, you're out of luck.

For this reason, JPEG offers the promise of significantly better image quality
for all users whose machines don't match the sender's display hardware.
JPEG's full color image can be quantized to precisely match the user's display
hardware.  Furthermore, you will be able to take advantage of future
improvements in quantization algorithms (there is a lot of active research in
this area), or purchase better display hardware, to get a better view of JPEG
images you already have.  With a GIF, you're stuck forevermore with what was
sent.

It's also worth mentioning that many GIF-viewing programs include rather
shoddy quantization routines.  If you view a 256-color GIF on a 16-color EGA
display, for example, you are probably getting a much worse image than you
need to.  This is partly an inevitable consequence of doing two color
quantizations (one to create the GIF, one to display it), but often it's
also due to sloppiness.  JPEG conversion programs will be forced to use
high quality quantizers in order to get acceptable results at all, and in
normal use they will quantize directly to the number of colors to be
displayed.  Thus, JPEG is likely to provide better results than the average
GIF program for low-color-resolution displays as well as high-resolution ones!

Finally, an ever-growing number of people have better-than-8-bit display
hardware already: 15-bit "hi-color" PC displays, true 24-bit displays on
workstations and Macintoshes, etc.  For these people, GIF is already
obsolete, as it cannot represent an image to the full capabilities of their
display.  JPEG images can drive these displays much more effectively.
Thus, JPEG is an all-around better choice than GIF for representing images
in a machine-independent fashion.


[8]  How does JPEG work?

The buzz-words to know are chrominance subsampling, discrete cosine
transforms, coefficient quantization, and Huffman or arithmetic entropy
coding.  This article's long enough already, so I'm not going to say more
than that here.  For technical information, see the comp.compression FAQ.
This is available from the news.answers archive at rtfm.mit.edu, in files
/pub/usenet/news.answers/compression-faq/part[1-3].  If you need help in
using the news.answers archive, see the top of this article.


[9]  What about lossless JPEG?

There's a great deal of confusion on this subject.  The JPEG committee did
define a truly lossless compression algorithm, i.e., one that guarantees the
final output is bit-for-bit identical to the original input.  However, this
lossless mode has almost nothing in common with the regular, lossy JPEG
algorithm, and it offers much less compression.  At present, very few
implementations of lossless JPEG exist, and all of them are commercial.

Saying "-Q 100" to the free JPEG software DOES NOT get you a lossless image.
What it does get rid of is deliberate information loss in the coefficient
quantization step.  There is still a good deal of information loss in the
color subsampling step.  (With the V4 free JPEG code, you can also say
"-sample 1x1" to turn off subsampling.  Keep in mind that many commercial
JPEG implementations cannot cope with the resulting file.)

Even with both quantization and subsampling turned off, the regular JPEG
algorithm is not lossless, because it is subject to roundoff errors in
various calculations.  The maximum error is a few counts in any one pixel
value; it's highly unlikely that this could be perceived by the human eye,
but it might be a concern if you are doing machine processing of an image.

At this minimum-loss setting, regular JPEG produces files that are perhaps
half the size of an uncompressed 24-bit-per-pixel image.  True lossless JPEG
provides roughly the same amount of compression, but it guarantees
bit-for-bit accuracy.

If you have an application requiring lossless storage of images with less
than 6 bits per pixel (per color component), you may want to look into the
JBIG bilevel image compression standard.  This performs better than JPEG
lossless on such images.  JPEG lossless is superior to JBIG on images with
6 or more bits per pixel; furthermore, JPEG is public domain (at least with a
Huffman back end), while the JBIG techniques are heavily covered by patents.


[10]  Why all the argument about file formats?

Strictly speaking, JPEG refers only to a family of compression algorithms;
it does *not* refer to a specific image file format.  The JPEG committee was
prevented from defining a file format by turf wars within the international
standards organizations.

Since we can't actually exchange images with anyone else unless we agree on
a common file format, this leaves us with a problem.  In the absence of
official standards, a number of JPEG program writers have just gone off to
"do their own thing", and as a result their programs aren't compatible with
anybody else's.

The closest thing we have to a de-facto standard JPEG format is some work
that's been coordinated by people at C-Cube Microsystems.  They have defined
two JPEG-based file formats:
  * JFIF (JPEG File Interchange Format), a "low-end" format that transports
    pixels and not much else.
  * TIFF/JPEG, aka TIFF 6.0, an extension of the Aldus TIFF format.  TIFF is
    a "high-end" format that will let you record just about everything you
    ever wanted to know about an image, and a lot more besides :-).  TIFF is
    a lot more complex than JFIF, and may well prove less transportable,
    because different vendors have historically implemented slightly different
    and incompatible subsets of TIFF.  It's not likely that adding JPEG to the
    mix will do anything to improve this situation.
Both of these formats were developed with input from all the major vendors
of JPEG-related products; it's reasonably likely that future commercial
products will adhere to one or both standards.

I believe that Usenet should adopt JFIF as the replacement for GIF in
picture postings.  JFIF is simpler than TIFF and is available now; the
TIFF 6.0 spec has only recently been officially adopted, and it is still
unusably vague on some crucial details.  Even when TIFF/JPEG is well
defined, the JFIF format is likely to be a widely supported "lowest common
denominator"; TIFF/JPEG files may never be as transportable.

A particular case that people may be interested in is Apple's QuickTime
software for the Macintosh.  QuickTime uses a JFIF-compatible format wrapped
inside the Mac-specific PICT structure.  Conversion between JFIF and
QuickTime JPEG is pretty straightforward, and several Mac programs are
available to do it (see Mac portion of section 6A).  If you have an editor
that handles binary files, you can strip a QuickTime JPEG PICT down to JFIF
by hand; see section 11 for details.

Another particular case is Handmade Software's programs (GIF2JPG/JPG2GIF and
Image Alchemy).  These programs are capable of reading and writing JFIF
format.  By default, though, they write a proprietary format developed by
HSI.  This format is NOT readable by any non-HSI programs and should not be
used for Usenet postings.  Use the -j switch to get JFIF output.  (This
applies to old versions of these programs; the current releases emit JFIF
format by default.  You still should be careful not to post HSI-format
files, unless you want to get flamed by people on non-PC platforms.)


[11]  How do I recognize which file format I have, and what do I do about it?

If you have an alleged JPEG file that your software won't read, it's likely
to be HSI format or some other proprietary JPEG-based format.  You can tell
what you have by inspecting the first few bytes of the file:

1.  A JFIF-standard file will start with the characters (hex) FF D8 FF E0,
    followed by two variable bytes (often hex 00 10), followed by 'JFIF'.

2.  If you see FF D8 at the start, but not the rest of it, you may have a
    "raw JPEG" file.  This is probably decodable as-is by JFIF software ---
    it's worth a try, anyway.

3.  HSI files start with 'hsi1'.  You're out of luck unless you have HSI
    software.  Portions of the file may look like plain JPEG data, but they
    won't decompress properly with non-HSI programs.

4.  A Macintosh PICT file, if JPEG-compressed, will have a couple hundred
    bytes of header followed by a JFIF header (scan for 'JFIF').  Strip off
    everything before the FF D8 and you should be able to read it.

5.  Anything else: it's a proprietary format, or not JPEG at all.  If you are
    lucky, the file may consist of a header and a raw JPEG data stream.
    If you can identify the start of the JPEG data stream (look for FF D8),
    try stripping off everything before that.

In uuencoded Usenet postings, the characteristic JFIF pattern is

	"begin" line
	M_]C_X ...

whereas uuencoded HSI files will start with

	"begin" line
	M:'-I ...

If you learn to check for the former, you can save yourself the trouble of
downloading non-JFIF files.


[12]  What about arithmetic coding?

The JPEG spec defines two different "back end" modules for the final output
of compressed data: either Huffman coding or arithmetic coding is allowed.
The choice has no impact on image quality, but arithmetic coding usually
produces a smaller compressed file.  On typical images, arithmetic coding
produces a file 5 or 10 percent smaller than Huffman coding.  (All the
file-size numbers previously cited are for Huffman coding.)

Unfortunately, the particular variant of arithmetic coding specified by the
JPEG standard is subject to patents owned by IBM, AT&T, and Mitsubishi.
Thus *you cannot legally use arithmetic coding* unless you obtain licenses
from these companies.  (The "fair use" doctrine allows people to implement
and test the algorithm, but actually storing any images with it is dubious
at best.)

At least in the short run, I recommend that people not worry about
arithmetic coding; the space savings isn't great enough to justify the
potential legal hassles.  In particular, arithmetic coding *should not*
be used for any images to be exchanged on Usenet.

There is some small chance that the legal situation may change in the
future.  Stay tuned for further details.


[13]  Does loss accumulate with repeated compression/decompression?

It would be nice if, having compressed an image with JPEG, you could
decompress it, manipulate it (crop off a border, say), and recompress it
without any further image degradation beyond what you lost initially.
Unfortunately THIS IS NOT THE CASE.  In general, recompressing an altered
image loses more information, though usually not as much as was lost the
first time around.

The next best thing would be that if you decompress an image and recompress
it *without changing it* then there is no further loss, i.e., you get an
identical JPEG file.  Even this is not true; at least, not with the current
free JPEG software.  It's essentially a problem of accumulation of roundoff
error.  If you repeatedly compress and decompress, the image will eventually
degrade to where you can see visible changes from the first-generation
output.  (It usually takes many such cycles to get visible change.)
One of the things on our to-do list is to see if accumulation of error can
be avoided or limited, but I am not optimistic about it.

In any case, the most that could possibly be guaranteed would be that
compressing the unmodified full-color output of djpeg, at the original
quality setting, would introduce no further loss.  Even such simple changes
as cropping off a border could cause further roundoff-error degradation.
(If you're wondering why, it's because the pixel-block boundaries move.
If you cropped off only multiples of 16 pixels, you might be safe, but
that's a mighty limited capability!)

The bottom line is that JPEG is a useful format for archival storage and
transmission of images, but you don't want to use it as an intermediate
format for sequences of image manipulation steps.  Use a lossless format
(PPM, RLE, TIFF, etc) while working on the image, then JPEG it when you are
ready to file it away.  Aside from avoiding degradation, you will save a lot
of compression/decompression time this way :-).


[14]  What are some rules of thumb for converting GIF images to JPEG?

As stated earlier, you *will* lose some amount of image information if you
convert an existing GIF image to JPEG.  If you can obtain the original
full-color data the GIF was made from, it's far better to make a JPEG from
that.  But if you need to save space and have only the GIF to work from,
here are some suggestions for getting maximum space savings with minimum
loss of quality.

The first rule when converting a GIF library is to look at each JPEG, to
make sure you are happy with it, before throwing away the corresponding GIF;
that will give you a chance to re-do the conversion with a higher quality
setting if necessary.  Some GIFs may be better left as GIFs, as explained in
section 3; in particular, cartoon-type GIFs with sixteen or fewer colors
don't convert well.  You may find that a JPEG file of reasonable quality
will be *larger* than the GIF.  (So check the sizes too.)

Experience to date suggests that large, high-visual-quality GIFs are the best
candidates for conversion to JPEG.  They chew up the most storage so offer
the most potential savings, and they convert to JPEG with least degradation.
Don't waste your time converting any GIF much under 100 Kbytes.  Also, don't
expect JPEG files converted from GIFs to be as small as those created
directly from full-color originals.  To maintain image quality you may have
to let the converted files be as much as twice as big as straight-through
JPEG files would be (i.e., shoot for 1/2 or 1/3rd the size of the GIF file,
not 1/4th as suggested in earlier comparisons).

Many people have developed an odd habit of putting a large constant-color
border around a GIF image.  While useless, this was nearly free in terms of
storage cost in GIF files.  It is NOT free in JPEG files, and the sharp
border boundary can create visible artifacts ("ghost" edges).  Do yourself
a favor and crop off any border before JPEGing.  (If you are on an X Windows
system, XV's manual and automatic cropping functions are a very painless
way to do this.)

cjpeg's default Q setting of 75 is appropriate for full-color input, but
for GIF inputs, Q settings of 85 to 95 often seem to be necessary to avoid
image degradation.  (If you apply smoothing as suggested below, the higher
Q setting may not be necessary.)

Color GIFs of photographs or complex artwork are usually "dithered" to fool
your eye into seeing more than the 256 colors that GIF can actually store.
If you enlarge the image, you will see that adjacent pixels are often of
significantly different colors; at normal size the eye averages these pixels
together to produce the illusion of an intermediate color value.  The
trouble with dithering is that, to JPEG, it looks like high-spatial-frequency
color noise; and JPEG can't compress noise very well.  The resulting JPEG
file is both larger and of lower image quality than what you would have
gotten from JPEGing the original full color image (if you had it).
To get around this, you want to "smooth" the GIF image before compression.
Smoothing averages together nearby pixels, thus approximating the color that
you thought you saw anyway, and in the process getting rid of the rapid
color changes that give JPEG trouble.  Appropriate use of smoothing will
often let you avoid using a high Q factor, thus further reducing the size of
the compressed file, while still obtaining a better-looking output image
than you'd get without smoothing.

With the V4 free JPEG software (or products based on it), a simple smoothing
capability is built in.  Try "-smooth 10" or so when converting GIFs.
Values of 10 to 25 seem to work well for high-quality GIFs.  Heavy-handed
dithering may require larger smoothing factors.  (If you can see regular
fine-scale patterns on the GIF image even without enlargement, then strong
smoothing is definitely called for.)  Too large a smoothing factor will blur
the output image, which you don't want.  If you are an image processing
wizard, you can also do smoothing with a separate filtering program, such as
pnmconvol from the PBMPLUS package.  However, cjpeg's built-in smoother is
a LOT faster than pnmconvol...

The upshot of all this is that "cjpeg -quality 85 -smooth 10" is probably a
good starting point for converting GIFs.  But if you really care about the
image, you'll want to check the results and maybe try a few other settings.


---------------------

For more information about JPEG in general or the free JPEG software in
particular, contact the Independent JPEG Group at jpeg-info@uunet.uu.net.

-- 
			tom lane
			organizer, Independent JPEG Group
Internet: tgl@cs.cmu.edu	BITNET: tgl%cs.cmu.edu@carnegie

========== END RAW ============================

Preprocessed:
============ START PREPROCESSED =================
 jpeg imag compress frequent ask question use info
jpeg jpg imag file program      expir mon jun gmt
archiv name jpeg faq last modifi  faq articl
discuss jpeg imag compress suggest addit clarif
welcom  new sinc version ad info imageview next
articl includ follow section  jpeg use jpeg use
jpeg stick gif well jpeg compress imag good
qualiti set jpeg get jpeg softwar can softwar
viewer etc sourc code what hoopla color quantize
jpeg work lossless jpeg argument file format
recogn file format arithmet code loss accumul
repeat compress decompress rule thumb convert gif
imag jpeg  section basic info everi jpeg user need
know section advanc info curious  articl post
everi week alway find latest version news answer
archiv rtfm mit edu ftp fetch pub usenet news
answer jpeg faq don't ftp send mail  mani faq
articl also store archiv instruct use archiv send
mail address word help index quot separ line don't
get repli server misread return address add line
path mynam mysit specifi correct mail address
repli      jpeg  jpeg pronounc jay peg standard
imag compress mechan jpeg stand joint photograph
expert group origin name committe wrote standard
jpeg design compress either full color gray scale
digit imag natur real world scene work well non
realist imag cartoon line draw  jpeg handl black
white bit per pixel imag handl motion pictur
compress standard compress type imag work committe
name jbig mpeg respect  jpeg lossi mean imag get
decompress isn't quit ident origin put algorithm
achiev much compress exploit known limit human eye
notabl fact small color detail aren't perceiv well
small detail light dark thus jpeg intend compress
imag look human plan machin analyz imag small
error introduc jpeg problem even invis eye  use
properti jpeg degre lossi vari adjust compress
paramet mean imag maker trade file size output
imag qualiti make extrem small file don't mind
poor qualiti use index imag archiv make thumbnail
view icon etc etc convers aren't happi output
qualiti default compress set jack qualiti satisfi
accept lesser compress   use jpeg  two good reason
make imag file smaller store bit per pixel color
data instead bit per pixel data  make imag file
smaller big win transmit file across network
archiv librari imag abl compress mbyte full color
file kbyte make big differ disk space transmiss
time compar gif jpeg size ratio like four one
detail  view softwar doesn't support jpeg direct
you'll convert jpeg format view manipul imag even
jpeg capabl viewer take longer decod view jpeg
imag view imag simpler format gif instanc thus use
jpeg essenti time space tradeoff give time order
store transmit imag cheapli  it worth note network
phone transmiss involv time save transfer shorter
file much greater extra time decompress file i'll
let arithmet  reason jpeg gradual replac gif
standard usenet post format jpeg store full color
inform bit pixel million color instead less fewer
color bit display hardwar seem like much advantag
within coupl year though bit gif look obsolet
black white macpaint format today furthermor
reason detail section jpeg far use gif exchang
imag among peopl wide vari color display hardwar
henc jpeg consider appropri gif use usenet post
standard   use jpeg stick gif  jpeg go displac gif
entir type imag gif superior imag qualiti file
size one first thing learn jpeg kind imag appli
rule thumb jpeg superior gif store full color gray
scale imag realist scene mean scan photograph
similar materi jpeg superior even don't bit
display hardwar lot superior see section detail
gif signific better imag distinct color cartoon
line draw particular larg area pixel exact color
compress effici inde gif jpeg can't squeez file
much gif without introduc visibl defect sort imag
best kept gif form particular singl color border
quit cheap gif file avoid jpeg file  jpeg also
hard time sharp edg row pure black pixel adjac row
pure white pixel exampl sharp edg tend come blur
unless use high qualiti set sort thing found scan
photograph show fair often gif file border
overlaid text etc blurri particular objection text
that pixel high gif lot small size overlaid text
don't jpeg  comput drawn imag ray trace scene
instanc usual fall scan imag cartoon term complex
complex subt render imag like jpeg well goe semi
realist artwork fantasi draw  plain black white
two level imag never convert jpeg need least gray
level jpeg use gray scale imag also note gif
lossless gray scale imag level jpeg  exist librari
gif imag wonder whether convert jpeg lose littl
imag qualiti section argu jpeg imag qualiti
superior gif appli format start full color origin
start gif you'v alreadi irretriev lost great deal
inform jpeg make thing wors howev disk space save
justifi convert anyway decis you'll make convert
gif librari jpeg see section hint prepar leav imag
gif format sinc gif convert well   well jpeg
compress imag  pretti darn well sampl file size
imag handi 727x525 full color imag ship harbor
first three file comparison purpos rest creat free
jpeg softwar describ section  file size byte
comment  ship ppm origin file ppm format compress
bit byte per pixel plus byte overhead ship ppm ppm
file pass unix compress compress doesn't
accomplish lot you'll note text orient compressor
give similar result ship gif convert gif ppmquant
ppmtogif save result lose color info gif save bit
pixel see sec  ship jpg95 cjpeg highest use
qualiti set indistinguish bit origin least
nonprofession eyebal ship jpg75 cjpeg default set
look mighti darn close distinguish origin even
screen ship jpg50 cjpeg slight defect know look
could tell it jpege without see origin still good
imag qualiti mani recent post usenet pictur group
ship jpg25 cjpeg jpeg characterist blocki becom
appar set djpeg blocksmooth help still i'v seen
plenti usenet post poorer imag qualiti ship jpg5o
cjpeg optim optim cut tabl overhead blocki perfect
satisfactori preview index purpos note file tini
compress ratio origin  case jpeg make file that
factor four five smaller gif compar qualiti file
everi bit good gif better full color display seem
typic ratio real world scene   good qualiti set
jpeg  jpeg compressor let pick file size imag
qualiti tradeoff select qualiti set seem
widespread confus mean set qualiti mean keep
inform claim qualiti scale pure arbitrari it
percentag anyth  name game use jpeg pick lowest
qualiti set smallest file size decompress imag
indistinguish origin set vari one imag anoth one
observ anoth rule thumb  default qualiti set often
best choic set lowest without expect see defect
typic imag tri first see defect except experiment
purpos never say produc file two three time larg
hard better qualiti  imag less perfect qualiti
begin might abl without objection degrad hand
might need higher qualiti set avoid degrad second
case seem appli much time convert gif jpeg default
right compress bit imag usual better convert gif
see section info  want small file say preview
index purpos prepar toler larg defect set rang
right amus art  note qualiti set discuss articl
appli free jpeg softwar describ section mani
program base jpeg implement imag alchemi use
complet differ qualiti scale program don't even
provid numer scale high medium low style choic
get jpeg softwar  program describ section avail
ftp don't know use ftp see faq articl find sourc
don't direct access ftp read ftpmail server articl
articl appear regular news answer  send usenet
news answer find sourc bodi anonym ftp list faq
also help it usenet news answer ftp list faq news
answer archiv  note list chang constant copi coupl
month old get latest jpeg faq news answer archiv
look can softwar viewer etc  first part list
system specif program run one kind system don't
see want machin check portabl jpeg softwar describ
end list note list concentr free sharewar program
obtain internet commerci program list  window
sharewar excel viewer jpeg gif mani imag format
also format convers simpl imag manipul it avail
ftp export lcs mit edu file contrib tar version
major upgrad support bit display mani improv howev
brand new still bug lurk prefer bleed edg stick
version also avail export note version good choic
bit display you'll get bit color convert bit imag
jpeg work fine convert gif bit imag jpeg caution
glitch version sure check save normal size
checkbox save jpeg file file blurri  anoth good
choic window john cristi free imagemagick packag
also avail export lcs mit edu file contrib
imagemagick tar packag handl mani imag process
convers task imagemagick viewer handl bit display
correct colormap display better though slower
color quantize basic free jpeg softwar  larg
complex packag want simpl imag viewer tri
xloadimag xli xloadimag support jpeg latest releas
xloadimag free avail export lcs mit edu file
contrib xloadimag tar xli variant version
xloadimag said fan somewhat faster robust origin
current xli inde faster robust current xloadimag
least respect jpeg file ijg decod xloadimag use
hack next xloadimag releas fix xli also free avail
export lcs mit edu file contrib xli tar program
said right thing bit display   dos  cover plain
dos window program see next head  one good choic
eric praetzel free dvpeg view jpeg gif file
current version avail ftp sune uwaterloo file pub
jpeg viewer dvpeg25 zip good basic viewer work
either machin user interfac flashi it function
anoth freewar jpeg gif tga viewer mohammad rezaei
hiview current version avail simtel20 mirror site
see note file msdos graphic hv12 zip hiview requir
better cpu vcpi compat memori manag qemm386 386max
work window hiview current fastest viewer imag
bigger screen larger imag scale imag fit screen
rather use pan scroll viewer prefer approach there
deni slow load larg imag consider note instal bit
tricki read direct care  sharewar altern colorview
dos easier instal either two freewar altern user
interfac also much spiffier look although person
find harder use keystrok inconsist behavior faster
dvpeg littl slower hiview least hardwar imag
larger screen size dvpeg colorview seem speed
faster hiview current version avail simtel20
mirror site see note file msdos graphic dcview21
zip requir vesa graphic driver don't one look
vesadrv2 zip vesa tsr zip directori mani recent
pcs built vesa driver don't tri load vesa driver
unless colorview complain driver miss  second
sharewar altern fullview kick around net don't
know stabl archiv locat current rather old version
inferior viewer anyway author tell new version
fullview short submit simtel20 archiv time  well
known gif viewer compushow cshow support jpeg
latest revis 60a howev cshow jpeg implement isn't
good it slow half speed viewer imag qualiti poor
except color display bad it'd nice see good jpeg
capabl cshow sharewar avail simtel20 mirror site
see note file msdos gif cshw860a zip  due remark
varieti graphic hardwar one viewer might work
particular machin can't get work you'll need use
one follow convers program convert jpeg gif view
favorit gif viewer color hardwar don't use gif
intermedi format tri find targa capabl viewer
instead vpic5 reput right thing color display
independ jpeg group free jpeg convert ftpabl
simtel20 mirror site see note file msdos graphic
jpeg4 zip jpeg4386 zip extend memori file dos
compil free sourc code describ section convert
jpeg gif targa ppm format  handmad softwar offer
free jpeg gif convers tool gif2jpg jpg2gif slow
limit convers gif format particular can't get bit
color output jpeg major advantag tool read write
hsi proprietari jpeg format well usenet standard
jfif format sinc hsi format file rather widespread
bbses use capabl version tool free prior version
sharewar get simtel20 mirror site see note file
msdos graphic gif2jpg2 zip note use hsi format
file post internet sinc readabl non platform
handmad softwar also sharewar imag convers manipul
packag imag alchemi translat jpeg file jfif hsi
format mani imag format also display imag demo
version imag alchemi version avail simtel20 mirror
site see note file msdos graphic alch162 zip  note
simtel20 internet key archiv site relat program
simtel20 full name wsmr simtel20 armi mil simtel20
run non unix system weird directori name document
refer directori msdos graphic simtel20 realli mean
pd1 msdos graphic physic milnet expect rather slow
ftp transfer rate simtel20 sever internet site
maintain copi mirror simtel20 archiv ftp user one
mirror site instead popular usa mirror site oak
oakland edu keep simtel20 file pub msdos graphic
ftp capabl retriev file simtel20 mail see inform
post comp archiv msdos announc find outsid usa
consult newsgroup learn nearest simtel20 mirror
microsoft window  sever window program capabl
display jpeg imag window viewer general slower dos
viewer hardwar due window system overhead note run
dos convers program describ insid window dos
window  newest entri winecj free extrem fast
version avail ftp rahul net file pub bryanw jpeg
wecj zip requir window color mode frill viewer bad
habit hog machin complet decod imag qualiti notic
wors viewer it fast you'll use anyway least
preview  jview freewar fair fast good line help
write decompress imag window bmp format can't
creat new jpeg file doesn't view gif jview also
lack use featur sharewar viewer bright adjust it
excel basic viewer current version avail ftp cica
indiana edu file pub win3 desktop jview090 zip
mirror archiv found internet site includ wuarchiv
wustl edu  winjpeg sharewar display jpeg gif targa
tiff bmp imag file write format use convert nifti
featur includ color balanc adjust slideshow
current version avail simtel20 mirror site see
note file msdos windows3 winjp210 zip slow compat
version regist you'll get version rough faster
colorview anoth sharewar entri earli promis
contend updat time point real advantag winjpeg
want tri anyway current version avail ftp cica
indiana edu file pub win3 desktop cview097 zip
understand new version appear author finish
colorview dos  dvpeg see dos head also work window
full screen mode window    follow file avail hobb
nmsu edu note check pub upload recent version hobb
moder fast move upload perman directori pub os2
graphic jpegv4 zip bit version free ijg convers
program version pub os2 graphic jpeg4 zip bit
version pub os2 graphic imgarc12 zip imag archiv
imag convers view graphic interfac strong convers
function view bit weaker sharewar pub os2 graphic
pmjpeg11 zip pmjpeg port winjpeg popular viewer
window see descript window section sharewar pub
os2 graphic pmview85 zip pmview jpeg gif bmp targa
pcx viewer gif view fast jpeg view rough speed two
program imag manipul slideshow function sharewar
macintosh  mac jpeg program reli appl jpeg
implement part quicktim system extens need
quicktim instal use quicktim need better cpu need
run system later you'r run system must also instal
bit quickdraw extens built system get quicktim ftp
ftp appl com file dts mac quicktim quicktim hqx
file contain quicktim better sever way respect
jpeg margin faster consider less prone crash fed
corrupt jpeg file howev applic seem compat problem
mac user keep mind quicktim jpeg format pict jpeg
usenet standard jfif jpeg format see section
detail post imag usenet make sure jfif format
program mention generat either format  first choic
probabl jpegview free program view imag jfif
format pict jpeg format gif format also convert
two jpeg format current version big improv prior
version get sumex aim stanford edu file info mac
app jpeg view hqx requir system quicktim bit
display jpegview usual produc best color imag
qualiti current avail mac jpeg viewer jpegview
view larg imag much less memori mac viewer fact it
one deal jpeg imag much 640x480 pixel typic 4mb
mac given larg imag jpegview automat scale fit
screen rather present scroll bar like viewer zoom
desir portion though peopl like behavior don't
overal jpegview user interfac well thought
gifconvert sharewar imag viewer convert support
jfif pict jpeg well gif sever imag format latest
version get sumex aim stanford edu file info mac
art gif gif convert hqx requir system later
gifconvert better jpegview plain jpeg gif viewer
much extens imag manipul format convers capabl
find worth sharewar fee lot play around imag also
newest version gifconvert load save jfif imag
without quicktim best bet machin old run quicktim
it faster quicktim note gifconvert run memori tri
load larg jpeg tri convert file gif jpeg convert
view gif version  jpeg convert mac version free
ijg jpeg convers util avail sumex aim stanford edu
file info mac app jpeg convert hqx run mac file
convers view use conjunct gif viewer  previous
version faq recommend imageri jpeg jpeg gif
convert base old version ijg code use program
definit replac jpeg convert  appl free program
pictpixi view imag jfif quicktim jpeg gif format
convert format get pictpixi ftp appl com file dts
mac quicktim stuff pictpixi hqx requir quicktim
pictpixi intend develop tool it realli best choic
unless like fool around quicktim drawback requir
lot memori produc relat poor color imag qualiti
anyth less bit display relat unfriend user
interfac wors pictpixi unsupport program mean
minor bug appl intend fix old version pictpixi
call pictcompressor float around net trash it even
buggier also quicktim starter kit includ much
clean descend pictpixi call pictur compressor note
pictur compressor free distribut net  storm
technolog pictur decompress free jpeg viewer
convert rather old program inferior program mani
way run without system quicktim forc use older
system need bit quickdraw realli old machin can't
use get sumex aim stanford edu file info mac app
pictur decompress hqx must set file type download
imag file jpeg allow pictur decompress open
machin old run bit quickdraw mac plus instanc
gifconvert choic singl program jpeg view don't
want pay gifconvert use jpeg convert free gif
viewer  commerci mac applic support jpeg although
deal usenet standard jfif format adob photoshop
version later read write jfif format jpeg file use
jpeg plug acquir menu must set file type download
jpeg file jpeg allow photoshop recogn  amiga
program list section store aminet archiv amiga
physik unizh mani mirror site archiv tri use
closest one usa good choic wuarchiv wustl edu look
mirror amiga physik unizh  hamlab plus excel jpeg
viewer convert well general imag manipul tool it
cheap sharewar read sever format besid jpeg
current version demo version avail amiga physik
unizh mirror site file amiga gfx edit hamlab208d
lha demo version crop imag larger 512x512 otherwis
fulli function  rend24 sharewar imag render
display jpeg ilbm gif imag program use creat anim
even captur frame fli render packag like lightwav
current version avail amiga physik unizh mirror
site file amiga os30 gfx rend105 lha note although
directori suppos amigado program program also run
amigado  viewtek free jpeg ilbm gif anim viewer
current version avail amiga physik unizh mirror
site file amiga gfx show viewtek104 lha  you'r
will spend real money sever commerci packag
support jpeg two written thoma krehbiel author
rend24 viewtek cinemorph standalon imag morph
packag imagefx impress bit imag captur convers
edit paint effect prepress packag also includ
cinemorph distribut great valley product art
depart profession adpro asdg inc wide use commerci
imag manipul softwar amiga imagemast black belt
system anoth well regard commerci graphic packag
jpeg support  free ijg jpeg softwar avail compil
amiga amiga physik unizh mirror site directori
amiga gfx conv file amigajpegv4 lha program
convert jpeg ppm gif targa format  amiga world
heavili infest quick dirti jpeg program mani base
ancient beta test version free ijg jpeg softwar
thank certain magazin publish disk month without
much notifi author among augjpeg newamyjpeg vjpeg
probabl other even heard opinion anyth older ijg
version march worth disk space it store program
trash get someth newer  atari  free ijg jpeg
softwar avail compil atari etc atari archiv umich
edu file atari graphic jpeg4bin zoo program
convert jpeg ppm gif targa format  monochrom
monitor tri mgif manag achiev four level grayscal
effect flicker version read jpeg file avail atari
archiv umich edu file atari graphic mgif41b zoo
heard free sharewar jpeg capabl viewer atari sure
must pointer appreci  acorn archimed  changefsi
suppli risc version convert view jpeg jfif format
provis also made convert imag jpeg although must
done cli rather doubl click  recent version sinc
sharewar program translat handl jpeg along imag
format older version found archimed bboard current
version avail regist author john kortink
nutterbrink ensched netherland price dutch guilder
pound  there also commerci product call jpeg
provid jpeg read write function direct jpeg view
well host imag format convers process option
expens necessarili better program contact softwar
freepost cambridg tel  next  imageview util
display imag format convers current version read
jpeg write imageview avail standard next archiv
sonata purdu edu orst edu somewher pub next
current organ it hard point specif sub directori
note older version float around support jpeg
portabl softwar almost system  none fit situat
obtain compil free jpeg convers softwar describ
you'll also need viewer program display bit less
gif viewer fine display color capabl tri find
viewer read targa ppm bit imag file  numer
commerci jpeg offer pop everi day recommend spend
money one unless find avail free sharewar softwar
vast slow case purchas hardwar assist product ask
point question whether product compli final jpeg
standard whether handl jfif file format mani
earliest commerci releas never compat anyon els
file   look sourc code work  free portabl code
jpeg compress avail independ jpeg group lead
packag contain sourc code document small test file
avail sever place offici archiv site sourc code
ftp net look directori graphic jpeg current releas
jpegsrc tar compress tar file don't forget retriev
binari mode retriev file ftp uucp don't know cope
tar format prefer zip format find simtel20 mirror
site see note file msdos graphic jpegsrc4 zip file
also avail compuserv graphsupport forum pic
librari jpsrc4 zip ftp access retriev sourc
nearest comp sourc misc archiv version appear issu
volum don't know retriev comp sourc misc post see
faq articl find sourc refer top section  free jpeg
code provid convers jpeg jfif format imag file gif
pbmplus ppm pgm utah rle truevis targa file format
core compress decompress modul easili reus program
imag viewer packag high portabl test mani machin
rang pcs cray  releas softwar noncommerci commerci
use compani welcom use basi jpeg relat product ask
royalti although ask acknowledg product literatur
see readm file distribut detail hope make softwar
industri qualiti although anyth that free offer
warranti accept liabil  independ jpeg group volunt
organ you'd like contribut improv softwar welcom
join   what hoopla color quantize  peopl don't
full color bit per pixel display hardwar typic
display hardwar store fewer bit per pixel display
fewer distinct color time display full color imag
comput must map imag appropri set repres color
process call color quantize someth misnom color
select better term we'r stuck standard usag though
clear color quantize lossi process turn imag
detail color quantize algorithm much impact final
imag qualiti error introduc jpeg except lowest
jpeg qualiti set  sinc jpeg full color format
convert color jpeg imag display bit less hardwar
requir color quantize true color jpeg even feed
less color gif jpeg come decompressor color
thousand color happen jpeg lossi affect pixel
littl differ two pixel start ident color probabl
come slight differ color origin color get smear
group nearbi color therefor quantize alway requir
display color jpeg colormap display regardless
imag sourc way avoid quantize ask gray scale
output  incident effect it near meaningless talk
number color use jpeg imag even attempt count
number distinct pixel valu differ jpeg decod give
differ result roundoff error differ occasion see
post imag describ color jpeg tell poster hasn't
read faq probabl convert jpeg gif jpeg classifi
color gray scale like photograph number color
isn't use concept jpeg  hand gif imag definit
alreadi quantiz fewer color gif definit number
color palett format doesn't allow palett entri
purpos usenet pictur distribut gif advantag sender
precomput color quantize recipi don't also
disadvantag gif you'r stuck sender quantize sender
quantiz differ number color display quantiz result
much poorer imag qualiti quantiz full color imag
furthermor sender didn't use high qualiti color
quantize algorithm you'r luck  reason jpeg offer
promis signific better imag qualiti user whose
machin don't match sender display hardwar jpeg
full color imag quantiz precis match user display
hardwar furthermor abl take advantag futur improv
quantize algorithm lot activ research area purchas
better display hardwar get better view jpeg imag
alreadi gif you'r stuck forevermor sent  it also
worth mention mani gif view program includ rather
shoddi quantize routin view color gif color ega
display exampl probabl get much wors imag need
part inevit consequ two color quantize one creat
gif one display often it also due sloppi jpeg
convers program forc use high qualiti quantize
order get accept result normal use quantiz direct
number color display thus jpeg like provid better
result averag gif program low color resolut
display well high resolut one  final ever grow
number peopl better bit display hardwar alreadi
bit color display true bit display workstat
macintosh etc peopl gif alreadi obsolet cannot
repres imag full capabl display jpeg imag drive
display much effect thus jpeg around better choic
gif repres imag machin independ fashion   jpeg
work  buzz word know chromin subsampl discret
cosin transform coeffici quantize huffman arithmet
entropi code articl long enough alreadi i'm go say
technic inform see comp compress faq avail news
answer archiv rtfm mit edu file pub usenet news
answer compress faq part need help use news answer
archiv see top articl   lossless jpeg  there great
deal confus jpeg committe defin truli lossless
compress algorithm one guarante final output bit
bit ident origin input howev lossless mode almost
noth common regular lossi jpeg algorithm offer
much less compress present implement lossless jpeg
exist commerci  say free jpeg softwar get lossless
imag get rid deliber inform loss coeffici quantize
step still good deal inform loss color subsampl
step free jpeg code also say sampl 1x1 turn
subsampl keep mind mani commerci jpeg implement
cannot cope result file  even quantize subsampl
turn regular jpeg algorithm lossless roundoff
error various calcul maximum error count one pixel
valu it high unlik could perceiv human eye might
concern machin process imag  minimum loss set
regular jpeg produc file perhap half size
uncompress bit per pixel imag true lossless jpeg
provid rough amount compress guarante bit bit
accuraci  applic requir lossless storag imag less
bit per pixel per color compon want look jbig
bilevel imag compress standard perform better jpeg
lossless imag jpeg lossless superior jbig imag bit
per pixel furthermor jpeg public domain least
huffman back end jbig techniqu heavili cover
patent   argument file format  strict speak jpeg
refer famili compress algorithm refer specif imag
file format jpeg committe prevent defin file
format turf war within intern standard organ  sinc
can't actual exchang imag anyon els unless agre
common file format leav problem absenc offici
standard number jpeg program writer gone thing
result program aren't compat anybodi els  closest
thing facto standard jpeg format work that coordin
peopl cube microsystem defin two jpeg base file
format jfif jpeg file interchang format low end
format transport pixel much els tiff jpeg aka tiff
extens aldus tiff format tiff high end format let
record everyth ever want know imag lot besid tiff
lot complex jfif well prove less transport differ
vendor histor implement slight differ incompat
subset tiff it like ad jpeg mix anyth improv
situat format develop input major vendor jpeg
relat product it reason like futur commerci
product adher one standard  believ usenet adopt
jfif replac gif pictur post jfif simpler tiff
avail tiff spec recent offici adopt still unus
vagu crucial detail even tiff jpeg well defin jfif
format like wide support lowest common denomin
tiff jpeg file never transport  particular case
peopl interest appl quicktim softwar macintosh
quicktim use jfif compat format wrap insid mac
specif pict structur convers jfif quicktim jpeg
pretti straightforward sever mac program avail see
mac portion section editor handl binari file strip
quicktim jpeg pict jfif hand see section detail
anoth particular case handmad softwar program
gif2jpg jpg2gif imag alchemi program capabl read
write jfif format default though write proprietari
format develop hsi format readabl non hsi program
use usenet post use switch get jfif output appli
old version program current releas emit jfif
format default still care post hsi format file
unless want get flame peopl non platform   recogn
file format  alleg jpeg file softwar won't read it
like hsi format proprietari jpeg base format tell
inspect first byte file  jfif standard file start
charact hex follow two variabl byte often hex
follow jfif  see start rest raw jpeg file probabl
decod jfif softwar it worth tri anyway  hsi file
start hsi1 you'r luck unless hsi softwar portion
file look like plain jpeg data won't decompress
proper non hsi program  macintosh pict file jpeg
compress coupl hundr byte header follow jfif
header scan jfif strip everyth abl read  anyth els
it proprietari format jpeg lucki file consist
header raw jpeg data stream identifi start jpeg
data stream look tri strip everyth  uuencod usenet
post characterist jfif pattern  begin line
wherea uuencod hsi file start  begin line   learn
check former save troubl download non jfif file
arithmet code  jpeg spec defin two differ back end
modul final output compress data either huffman
code arithmet code allow choic impact imag qualiti
arithmet code usual produc smaller compress file
typic imag arithmet code produc file percent
smaller huffman code file size number previous
cite huffman code  unfortun particular variant
arithmet code specifi jpeg standard patent own ibm
mitsubishi thus cannot legal use arithmet code
unless obtain licens compani fair use doctrin
allow peopl implement test algorithm actual store
imag dubious best  least short run recommend peopl
worri arithmet code space save isn't great enough
justifi potenti legal hassl particular arithmet
code use imag exchang usenet  small chanc legal
situat chang futur stay tune detail   loss accumul
repeat compress decompress  nice compress imag
jpeg could decompress manipul crop border say
recompress without imag degrad beyond lost initi
unfortun case general recompress alter imag lose
inform though usual much lost first time around
next best thing decompress imag recompress without
chang loss get ident jpeg file even true least
current free jpeg softwar it essenti problem
accumul roundoff error repeat compress decompress
imag eventu degrad see visibl chang first generat
output usual take mani cycl get visibl chang one
thing list see accumul error avoid limit optimist
case could possibl guarante compress unmodifi full
color output djpeg origin qualiti set introduc
loss even simpl chang crop border could caus
roundoff error degrad you'r wonder it pixel block
boundari move crop multipl pixel might safe that
mighti limit capabl  bottom line jpeg use format
archiv storag transmiss imag don't want use
intermedi format sequenc imag manipul step use
lossless format ppm rle tiff etc work imag jpeg
readi file away asid avoid degrad save lot
compress decompress time way   rule thumb convert
gif imag jpeg  state earlier lose amount imag
inform convert exist gif imag jpeg obtain origin
full color data gif made it far better make jpeg
need save space gif work suggest get maximum space
save minimum loss qualiti  first rule convert gif
librari look jpeg make sure happi throw away
correspond gif give chanc convers higher qualiti
set necessari gif better left gif explain section
particular cartoon type gif sixteen fewer color
don't convert well find jpeg file reason qualiti
larger gif check size  experi date suggest larg
high visual qualiti gif best candid convers jpeg
chew storag offer potenti save convert jpeg least
degrad don't wast time convert gif much kbyte also
don't expect jpeg file convert gif small creat
direct full color origin maintain imag qualiti let
convert file much twice big straight jpeg file
shoot 3rd size gif file 4th suggest earlier
comparison  mani peopl develop odd habit put larg
constant color border around gif imag useless near
free term storag cost gif file free jpeg file
sharp border boundari creat visibl artifact ghost
edg favor crop border jpege window system xv
manual automat crop function painless way  cjpeg
default set appropri full color input gif input
set often seem necessari avoid imag degrad appli
smooth suggest higher set necessari  color gif
photograph complex artwork usual dither fool eye
see color gif actual store enlarg imag see adjac
pixel often signific differ color normal size eye
averag pixel togeth produc illus intermedi color
valu troubl dither jpeg look like high spatial
frequenc color nois jpeg can't compress nois well
result jpeg file larger lower imag qualiti gotten
jpege origin full color imag get around want
smooth gif imag compress smooth averag togeth
nearbi pixel thus approxim color thought saw
anyway process get rid rapid color chang give jpeg
troubl appropri use smooth often let avoid use
high factor thus reduc size compress file still
obtain better look output imag you'd get without
smooth  free jpeg softwar product base simpl
smooth capabl built tri smooth convert gif valu
seem work well high qualiti gif heavi hand dither
requir larger smooth factor see regular fine scale
pattern gif imag even without enlarg strong smooth
definit call larg smooth factor blur output imag
don't want imag process wizard also smooth separ
filter program pnmconvol pbmplus packag howev
cjpeg built smoother lot faster pnmconvol  upshot
cjpeg qualiti smooth probabl good start point
convert gif realli care imag you'll want check
result mayb tri set     inform jpeg general free
jpeg softwar    tom lane organ independ jpeg group
carnegi
========== END PREPROCESSED =====================


Feature vector (sorted, non-zero values only):
Term, Index, Value:
jpeg, 4905, 0.66314675522
imag, 4512, 0.292905122542
gif, 3869, 0.239747234501
file, 3477, 0.238114940415
color, 1907, 0.179988055892
format, 3612, 0.163927009459
jfif, 4865, 0.122539609523
qualiti, 7017, 0.120949260534
compress, 1986, 0.118737875485
version, 9479, 0.112613801272
viewer, 9512, 0.108129811493
convert, 2115, 0.0987739331114
display, 2734, 0.0941251365246
bit, 1122, 0.0828893023308
free, 3668, 0.082280999424
program, 6905, 0.0813691138713
quicktim, 7039, 0.0756160864393
pixel, 6651, 0.0715761127381
simtel20, 7973, 0.0704149394108
use, 9363, 0.0675440555878
quantize, 7023, 0.0671966449875
archiv, 618, 0.0671910150749
zip, 9988, 0.0651532670344
avail, 811, 0.0626005742
convers, 2114, 0.0616400538543
sharewar, 7856, 0.0594872554613
softwar, 8103, 0.0565039303807
mirror, 5755, 0.0549133621699
decompress, 2452, 0.0542222509618
set, 7815, 0.0528157018408
lossless, 5354, 0.0513875781872
view, 9510, 0.0511940270317
section, 7759, 0.0510651714569
usenet, 9365, 0.0497195710054
hsi, 4415, 0.0496397656086
note, 6118, 0.0492607272323
code, 1871, 0.04775241517
ftp, 3709, 0.0463596853249
mac, 5410, 0.0438093205938
site, 7994, 0.0427649245459
current, 2299, 0.0415541083633
arithmet, 638, 0.0413391097429
size, 8000, 0.0405502285458
standard, 8313, 0.0402683691846
amiga, 472, 0.0397195852166
edu, 3001, 0.0387269547486
window, 9774, 0.038622785093
smooth, 8069, 0.037897431328
graphic, 3997, 0.0377584101579
pub, 6971, 0.0370067007688
msdos, 5903, 0.0368872015269
hardwar, 4173, 0.036580584547
better, 1060, 0.0343095736639
faq, 3385, 0.0331773397451
ijg, 4503, 0.0330931770724
ppm, 6787, 0.0330322689571
tiff, 8926, 0.0325346169943
don, 2811, 0.0322073029119
capabl, 1498, 0.0318310983267
origin, 6293, 0.0310753539164
scale, 7659, 0.0305536127886
output, 6329, 0.030282201543
cjpeg, 1781, 0.0300648070858
machin, 5416, 0.0298134553709
pictpixi, 6621, 0.0298095826462
save, 7646, 0.0285753775629
packag, 6375, 0.0285447935475
choic, 1717, 0.0277518059854
commerci, 1940, 0.027709132256
store, 8417, 0.027705459343
degrad, 2490, 0.0274967587052
xloadimag, 9903, 0.0268232721712
ship, 7888, 0.0264301552554
mani, 5479, 0.0263351245959
atari, 735, 0.0263067062
targa, 8703, 0.026239871599
jpegview, 4909, 0.0255510708396
gifconvert, 3873, 0.0255510708396
manipul, 5483, 0.0252682710433
border, 1229, 0.0245099351696
unizh, 9285, 0.0242224586792
physik, 6615, 0.0242224586792
hqx, 4410, 0.0242224586792
sourc, 8153, 0.0241883551357
high, 4292, 0.0240098558632
work, 9833, 0.0232082316005
dos, 2825, 0.0231898699324
default, 2470, 0.02312258827
particular, 6442, 0.022864927792
tar, 8701, 0.0225096163466
requir, 7302, 0.02234825285
post, 6766, 0.0223299255616
larg, 5124, 0.0222472858558
quantiz, 7022, 0.022236296656
pict, 6620, 0.022236296656
tri, 9087, 0.0221429076267
look, 5341, 0.0218066332495
gray, 4011, 0.02174247484
read, 7135, 0.0216118347872
info, 4636, 0.0215006386233
faster, 3399, 0.0214400187319
algorithm, 407, 0.0213694304821
lossi, 5353, 0.021292559033
hiview, 4323, 0.021292559033
user, 9366, 0.0212158198192
result, 7332, 0.0211932738979
good, 3948, 0.0210578696186
loss, 5352, 0.021034654006
pictur, 6622, 0.0207473568318
directori, 2669, 0.0207148272825
os2, 6306, 0.0206832356702
huffman, 4425, 0.0206832356702
colorview, 1911, 0.0206832356702
crop, 2240, 0.0206225690289
product, 6896, 0.0205784350128
differ, 2633, 0.0201793576777
answer, 535, 0.0201569626131
run, 7543, 0.0197408788199
error, 3180, 0.0197091781386
superior, 8562, 0.0194176228948
avoid, 827, 0.0193938215401
articl, 665, 0.0193615351698
small, 8054, 0.0191478597981
news, 6031, 0.0188624327254
describ, 2556, 0.0188250273049
support, 8576, 0.0188094959495
mit, 5781, 0.0186364070057
old, 6216, 0.0185855167722
compat, 1965, 0.0185385859871
implement, 4544, 0.0184540221185
like, 5272, 0.018398916816
byte, 1438, 0.0181741261892
time, 8936, 0.0181665205462
appl, 583, 0.0180890107344
list, 5298, 0.0180016789257
inform, 4637, 0.0179501056066
xli, 9901, 0.0178717219073
want, 9634, 0.0178521286346
unless, 9289, 0.0177904863619
handl, 4149, 0.0176602401726
need, 5993, 0.0176203888937
ll, 5314, 0.0173001967414
fewer, 3456, 0.0171854741907
lot, 5356, 0.0170400872039
jbig, 4834, 0.0170340472264
produc, 6895, 0.0169367892851
larger, 5125, 0.0167885254486
lha, 5241, 0.0165465885362
dvpeg, 2932, 0.0165465885362
defect, 2473, 0.0165161344785
decod, 2450, 0.0165161344785
make, 5459, 0.0164371003419
peopl, 6530, 0.0162990003858
slow, 8044, 0.0162194717239
subsampl, 8495, 0.0161483057862
roundoff, 7495, 0.0161483057862
usual, 9377, 0.0161368330914
sever, 7823, 0.0161255700904
number, 6156, 0.0159826162556
sender, 7786, 0.0158831691155
compressor, 1987, 0.0158115625191
cartoon, 1538, 0.0158115625191
retriev, 7343, 0.0157905963866
start, 8334, 0.0155582035141
process, 6890, 0.0154532284416
photograph, 6604, 0.0154488216559
export, 3310, 0.0154488216559
function, 3722, 0.0153488260136
accumul, 224, 0.0152625643459
screen, 7719, 0.0152413816085
non, 6097, 0.0151523967465
write, 9865, 0.0150616676715
gfx, 3861, 0.0150324035429
sumex, 8533, 0.0148241977707
best, 1052, 0.0146069871435
appli, 584, 0.0145172479586
line, 5285, 0.0144817919195
thumb, 8905, 0.0144592669232
alchemi, 390, 0.0144592669232
offer, 6203, 0.0143789674925
smaller, 8055, 0.0143416448556
latest, 5141, 0.0143416448556
releas, 7253, 0.0143252488997
interfac, 4709, 0.0141855661488
data, 2385, 0.0141573637264
typic, 9178, 0.013897865145
lcs, 5169, 0.0138732423181
contrib, 2102, 0.0138732423181
lowest, 5372, 0.0137483793526
chang, 1650, 0.0137355155107
independ, 4595, 0.0136792978079
proprietari, 6935, 0.0136302691195
obtain, 6183, 0.0135162264366
tool, 8988, 0.013438203015
thing, 8869, 0.013427707367
check, 1682, 0.0133626639904
complex, 1976, 0.0133623471934
advantag, 286, 0.0133251951376
storag, 8416, 0.0133100127774
group, 4064, 0.0133043110185
case, 1540, 0.0132915892512
ident, 4484, 0.0132129075828
alreadi, 443, 0.0131326214296
portabl, 6749, 0.0131199357995
introduc, 4732, 0.0131199357995
internet, 4717, 0.0131123107037
aim, 353, 0.0129450819298
eye, 3337, 0.0128211985389
recompress, 7179, 0.0127755354198
jpege, 4907, 0.0127755354198
stanford, 8318, 0.0127065352924
furthermor, 3732, 0.0127065352924
regular, 7234, 0.0126719464206
creat, 2217, 0.0126674188468
improv, 4557, 0.0126144572661
direct, 2667, 0.0125568670344
probabl, 6885, 0.0125025730082
scene, 7671, 0.0124242713371
handmad, 4150, 0.0124099414021
worth, 9850, 0.0123697592609
memori, 5628, 0.0123697592609
committe, 1946, 0.0123590573248
anoth, 533, 0.0123209769262
macintosh, 5418, 0.0122957338423
instal, 4679, 0.0122957338423
index, 4596, 0.0121743411034
librari, 5250, 0.0121213486325
plain, 6659, 0.0121160841262
older, 6218, 0.0121160841262
winjpeg, 9785, 0.0121112293396
vesa, 9484, 0.0120593404896
fast, 3397, 0.0120510279917
defin, 2482, 0.0119824729104
black, 1133, 0.0119377074165
quickdraw, 7037, 0.0118586718894
mean, 5595, 0.0118141980134
purpos, 6993, 0.0117448766881
sinc, 7977, 0.0116536553873
intermedi, 4715, 0.0116398966748
cshow, 2272, 0.0116398966748
input, 4662, 0.0116057508062
compil, 1972, 0.0116057508062
appropri, 590, 0.0114733158845
freewar, 3681, 0.0114469232594
scan, 7660, 0.0114308969365
rule, 7537, 0.0113958105406
howev, 4406, 0.0112962507536
includ, 4579, 0.0112751782645
anyth, 555, 0.0112334355245
author, 796, 0.0112025661112
visibl, 9541, 0.0111923502991
disk, 2720, 0.0111923502991
extens, 3320, 0.0110821837372
deal, 2418, 0.0110380203154
net, 6010, 0.0109905298319
driver, 2876, 0.0109773072531
sharp, 7858, 0.0109755905946
wors, 9846, 0.0109100863438
recent, 7168, 0.0108528216295
imagemagick, 4514, 0.0108444501924
space, 8164, 0.0108438748336
comp, 1955, 0.0108129811493
follow, 3578, 0.0107700633639
final, 3482, 0.0107217260245
type, 9177, 0.0106654222983
transmiss, 9058, 0.010609996577
overhead, 6341, 0.010609996577
reason, 7156, 0.0105692935269
slower, 8045, 0.0105042579298
app, 576, 0.0105042579298
factor, 3352, 0.0104898485629
allow, 432, 0.010464055862
relat, 7247, 0.010438294973
suggest, 8525, 0.0104127748436
edg, 2993, 0.0104094281743
base, 923, 0.0102546764777
distribut, 2753, 0.0102325506758
preview, 6854, 0.0102227018396
load, 5317, 0.0101609210723
provid, 6949, 0.0101010486579
dither, 2757, 0.0100587270642
mode, 5806, 0.0100243449036
bmp, 1183, 0.00983995184964
text, 8822, 0.00977441466985
stuck, 8466, 0.00977306989452
strip, 8451, 0.00977306989452
ratio, 7109, 0.00977306989452
distinct, 2746, 0.00977306989452
demo, 2517, 0.00977306989452
exchang, 3264, 0.00970881144738
header, 4217, 0.00964697843426
download, 2843, 0.00964697843426
lose, 5350, 0.00960410712268
built, 1381, 0.00956799874388
limit, 5278, 0.00955016593316
ask, 689, 0.00945794382544
definit, 2484, 0.00944612211814
els, 3053, 0.00944009648102
end, 3091, 0.00941354229468
know, 5052, 0.0094107818125
instead, 4682, 0.00937941442559
white, 9737, 0.0093630509994
guarante, 4076, 0.00931820350285
simpl, 7965, 0.00931468355093
realist, 7147, 0.00922180038173
organ, 6287, 0.00914597111678
portion, 6752, 0.00913075582756
basic, 937, 0.00898935958426
test, 8812, 0.00897566356961
vari, 9426, 0.00896256927505
level, 5229, 0.00896205288894
valu, 9414, 0.00893508332193
recogn, 7173, 0.0089230883192
transport, 9065, 0.0088100517518
rough, 7493, 0.00877404194214
effect, 3005, 0.00875508095309
entri, 3135, 0.00873880659733
specif, 8203, 0.00867035260288
welcom, 9701, 0.00863743114953
let, 5225, 0.00862358715299
instanc, 4680, 0.00857317270239
viewtek, 9515, 0.0085170236132
rend24, 7275, 0.0085170236132
pnmconvol, 6706, 0.0085170236132
jview, 4941, 0.0085170236132
jpg2gif, 4911, 0.0085170236132
jpeg4, 4906, 0.0085170236132
indistinguish, 4603, 0.0085170236132
hoopla, 4369, 0.0085170236132
gif2jpg, 3870, 0.0085170236132
dts, 2898, 0.0085170236132
cinemorph, 1762, 0.0085170236132
amigado, 473, 0.0085170236132
pure, 6990, 0.00848127682039
adjust, 269, 0.00848127682039
general, 3818, 0.00843426368989
say, 7653, 0.00831925240915
recommend, 7178, 0.00831163780289
tradeoff, 9035, 0.0082732942681
slideshow, 8033, 0.0082732942681
objection, 6174, 0.0082732942681
kbyte, 4966, 0.0082732942681
fullview, 3719, 0.0082732942681
cica, 1751, 0.0082732942681
render, 7277, 0.00825878223901
legal, 5200, 0.00820757868473
repeat, 7286, 0.00818256475786
altern, 450, 0.00815792699454
develop, 2588, 0.00813591345294
slight, 8034, 0.00810973586195
stick, 8393, 0.00808616163674
poorer, 6742, 0.00807415289308
blurri, 1180, 0.00807415289308
blocki, 1165, 0.00807415289308
archimed, 614, 0.00807415289308
necessari, 5990, 0.00806292180899
refer, 7213, 0.00805381375056
intend, 4700, 0.00804000702447
help, 4249, 0.00802219016438
art, 660, 0.00801740831604
isn, 4783, 0.0080007461892
abl, 180, 0.00799202559007
wide, 9747, 0.00797312506935
new, 6023, 0.00795424744079
troubl, 9117, 0.0079300073076
hand, 4145, 0.00792348640952
replac, 7288, 0.0079088666222
win3, 9771, 0.00790578125957
hobb, 4331, 0.00790578125957
djpeg, 2774, 0.00790578125957
cope, 2128, 0.00790578125957
artwork, 670, 0.00790578125957
usa, 9357, 0.0078673864222
plus, 6700, 0.0078673864222
excel, 3261, 0.00784703360909
repres, 7294, 0.00782693053006
poor, 6741, 0.00780707113071
true, 9121, 0.00779254041701
rtfm, 7520, 0.00775993111654
robust, 7443, 0.00775993111654
overlaid, 6343, 0.00775993111654
hex, 4282, 0.00775993111654
blur, 1178, 0.00775993111654
adjac, 268, 0.00775993111654
consider, 2060, 0.00772995664412
zoo, 9992, 0.00763128217296
variant, 9429, 0.00763128217296
desktop, 2567, 0.00763128217296
coeffici, 1873, 0.00763128217296
offici, 6207, 0.00762069080425
step, 8377, 0.00756867435967
higher, 4293, 0.00751825867767
enlarg, 3115, 0.00751620177144
colormap, 1909, 0.00751620177144
mail, 5447, 0.00750979508069
normal, 6108, 0.00750179240454
real, 7144, 0.00748895701635
prefer, 6819, 0.00748548997764
everi, 3235, 0.00748205493421
big, 1082, 0.00744109422452
respect, 7321, 0.00742185555655
uuencod, 9389, 0.00741209888534
umich, 9205, 0.00741209888534
newest, 6029, 0.00741209888534
ilbm, 4504, 0.00741209888534
fit, 3510, 0.00739094180196
simpler, 7966, 0.00731706039642
readabl, 7136, 0.00731706039642
indiana, 4599, 0.00731706039642
fine, 3485, 0.0072728091795
draw, 2861, 0.0072728091795
begin, 994, 0.0072728091795
great, 4016, 0.00726572017214
lost, 5355, 0.00724456054202
pbmplus, 6483, 0.00722963346158
applic, 585, 0.00717599905791
common, 1948, 0.00714935813945
aren, 623, 0.00714935813945
mighti, 5709, 0.00714868876291
inferior, 4625, 0.00714868876291
adopt, 278, 0.00714868876291
way, 9666, 0.00714300481399
tell, 8767, 0.00713843132393
doesn, 2793, 0.00708607045601
obsolet, 6182, 0.00707333105132
signific, 7951, 0.00705938523934
everyth, 3242, 0.00705938523934
sure, 8585, 0.00703493531335
stream, 8438, 0.00700283861988
pcs, 6487, 0.00700283861988
patent, 6460, 0.00700283861988
averag, 816, 0.00697409711697
learn, 5182, 0.00696226760431
fair, 3363, 0.00693886177216
perceiv, 6532, 0.00693662115904
darn, 2370, 0.00693662115904
situat, 7995, 0.0069157856106
futur, 3737, 0.0069157856106
upload, 9339, 0.0068741896763
scroll, 7726, 0.0068741896763
rle, 7425, 0.0068741896763
boundari, 1251, 0.0068741896763
problem, 6887, 0.00687264483144
later, 5140, 0.00687058604376
coupl, 2187, 0.00681578560465
widespread, 9750, 0.00681513455974
nearest, 5984, 0.00681513455974
heavili, 4232, 0.00681513455974
cpu, 2200, 0.00681513455974
low, 5368, 0.00675235650725
term, 8795, 0.00673174767721
accept, 208, 0.00673174767721
row, 7501, 0.00670581804279
speed, 8217, 0.00666159223371
appear, 580, 0.00666159223371
rid, 7391, 0.00665500638869
right, 7399, 0.0066450923955
wustl, 9878, 0.00660645379142
photoshop, 6609, 0.00655996789976
palett, 6398, 0.00655996789976
nearbi, 5983, 0.00655996789976
closest, 1832, 0.00655996789976
turn, 9158, 0.00652067042696
nois, 6092, 0.00651537992968
realli, 7150, 0.00648219654472
care, 1516, 0.00645019158699
transmit, 9059, 0.00643131895617
regist, 7229, 0.00643131895617
optim, 6274, 0.00639159626625
mind, 5733, 0.00638261993269
address, 264, 0.00636615365955
vendor, 9458, 0.0063532676462
trash, 9068, 0.0063532676462
expect, 3290, 0.00634985123265
human, 4432, 0.00632569776742
wuarchiv, 9876, 0.00631623855466
maximum, 5560, 0.00631623855466
float, 3546, 0.00631623855466
characterist, 1663, 0.00631623855466
send, 7785, 0.00629403725785
fool, 3585, 0.00624574612323
hard, 4167, 0.00620256902114
point, 6710, 0.00616610627124
spec, 8196, 0.00614786692115
specifi, 8204, 0.00608717055171
prior, 6874, 0.00608717055171
match, 5541, 0.00608717055171
raw, 7114, 0.00605804206308
pattern, 6468, 0.00605804206308
major, 5458, 0.00601371939446
behavior, 1000, 0.00600201677812
prepar, 6831, 0.00592302427585
binari, 1096, 0.00592302427585
purchas, 6988, 0.00589791389203
habit, 4109, 0.00589791389203
comparison, 1962, 0.00589791389203
captur, 1509, 0.00589791389203
exist, 3283, 0.00587446818164
transfer, 9052, 0.00587336783454
modul, 5815, 0.00582587106489
minimum, 5740, 0.00582587106489
numer, 6157, 0.0058028754031
misc, 5757, 0.0058028754031
justifi, 4939, 0.00575828743302
sampl, 7601, 0.00571544846826
automat, 803, 0.00571544846826
impact, 4534, 0.00567422645952
server, 7812, 0.00565418454692
luck, 5381, 0.0056345037696
constant, 2067, 0.00557750369333
essenti, 3196, 0.005559146058
platform, 6676, 0.0055410918686
cheap, 1677, 0.0055410918686
bug, 1373, 0.0055410918686
achiev, 232, 0.0055410918686
littl, 5308, 0.00550644872996
translat, 9057, 0.00550585482601
world, 9841, 0.00548717344428
extrem, 3333, 0.00540649057464
fix, 3511, 0.00537528120599
resolut, 7316, 0.0053154167129
earlier, 2952, 0.0053154167129
actual, 254, 0.0052677995159
popular, 6746, 0.00525866350149
confus, 2037, 0.00525866350149
potenti, 6774, 0.00523135573939
maintain, 5454, 0.00523135573939
inde, 4594, 0.00520471408714
edit, 2996, 0.00520471408714
unfortun, 9264, 0.00519163304947
separ, 7797, 0.00519163304947
besid, 1051, 0.00519163304947
happi, 4161, 0.00514082139537
util, 9384, 0.00512847941557
promis, 6913, 0.00512847941557
spend, 8222, 0.00511627533788
previous, 6855, 0.00511627533788
insid, 4671, 0.00511627533788
featur, 3422, 0.00511627533788
select, 7774, 0.00510420611463
togeth, 8969, 0.00505722022132
network, 6018, 0.00505722022132
count, 2180, 0.00504578290644
document, 2788, 0.00502326141596
cover, 2194, 0.00502326141596
unix, 9284, 0.00500119493636
half, 4124, 0.00494790370437
rang, 7094, 0.00493755051225
pick, 6619, 0.00491713396286
leav, 5184, 0.0048677022882
strong, 8456, 0.00483908265288
copi, 2130, 0.00480205356134
contain, 2079, 0.00480205356134
perfect, 6538, 0.00477508296658
com, 1917, 0.00477508296658
come, 1923, 0.00475101075958
chanc, 1649, 0.00474876232935
repli, 7290, 0.00474012786865
generat, 3819, 0.00473156112991
anim, 515, 0.0047146266265
ad, 257, 0.00468970721279
rest, 7324, 0.00466534366906
access, 209, 0.00466534366906
won, 9820, 0.00465734177547
head, 4215, 0.0046105237404
compar, 1960, 0.00459535330778
argument, 631, 0.00455832421624
compani, 1958, 0.00454385706976
singl, 7983, 0.00452957904174
similar, 7961, 0.00452250941453
forc, 3594, 0.00452250941453
month, 5847, 0.00450157100483
area, 622, 0.00444106148914
nice, 6047, 0.00442161432396
near, 5982, 0.00442161432396
money, 5835, 0.00440250735993
present, 6837, 0.00437138691891
mention, 5632, 0.00437138691891
known, 5054, 0.00436526783518
away, 833, 0.00432925621329
short, 7904, 0.00431751143786
winecj, 9777, 0.0042585118066
wecj, 9685, 0.0042585118066
vpic5, 9591, 0.0042585118066
vjpeg, 9555, 0.0042585118066
viewtek104, 9516, 0.0042585118066
vesadrv2, 9485, 0.0042585118066
upshot, 9343, 0.0042585118066
unmodifi, 9294, 0.0042585118066
truevis, 9126, 0.0042585118066
spiffier, 8231, 0.0042585118066
rezaei, 7372, 0.0042585118066
precomput, 6812, 0.0042585118066
praetzel, 6796, 0.0042585118066
ppmtogif, 6789, 0.0042585118066
pmview, 6705, 0.0042585118066
pmjpeg, 6704, 0.0042585118066
imagemast, 4515, 0.0042585118066
imagefx, 4513, 0.0042585118066
hamlab208d, 4139, 0.0042585118066
guilder, 4085, 0.0042585118066
graphsupport, 4000, 0.0042585118066
gif2jpg2, 3871, 0.0042585118066
ftpabl, 3710, 0.0042585118066
frill, 3694, 0.0042585118066
freepost, 3680, 0.0042585118066
forevermor, 3603, 0.0042585118066
ensched, 3121, 0.0042585118066
drawback, 2862, 0.0042585118066
decompressor, 2453, 0.0042585118066
dcview21, 2411, 0.0042585118066
cview097, 2321, 0.0042585118066
cshw860a, 2273, 0.0042585118066
cristi, 2233, 0.0042585118066
cosin, 2163, 0.0042585118066
conv, 2109, 0.0042585118066
cli, 1813, 0.0042585118066
chromin, 1736, 0.0042585118066
checkbox, 1683, 0.0042585118066
changefsi, 1651, 0.0042585118066
buggier, 1375, 0.0042585118066
bryanw, 1354, 0.0042585118066
blocksmooth, 1166, 0.0042585118066
bilevel, 1088, 0.0042585118066
bboard, 960, 0.0042585118066
augjpeg, 782, 0.0042585118066
asdg, 678, 0.0042585118066
amigajpegv4, 474, 0.0042585118066
adpro, 279, 0.0042585118066
727x525, 138, 0.0042585118066
60a, 124, 0.0042585118066
complet, 1975, 0.00422247294894
correct, 2156, 0.00420652735785
sort, 8144, 0.00420126347494
discuss, 2708, 0.00420126347494
manag, 5472, 0.00417020203798
heard, 4224, 0.00414997454157
winjp210, 9784, 0.00413664713405
unfriend, 9266, 0.00413664713405
thumbnail, 8906, 0.00413664713405
sloppi, 8042, 0.00413664713405
reus, 7348, 0.00413664713405
rahul, 7069, 0.00413664713405
noncommerci, 6099, 0.00413664713405
monochrom, 5840, 0.00413664713405
misread, 5768, 0.00413664713405
milnet, 5727, 0.00413664713405
lurk, 5399, 0.00413664713405
hog, 4338, 0.00413664713405
hamlab, 4138, 0.00413664713405
flicker, 3543, 0.00413664713405
compushow, 1992, 0.00413664713405
bleed, 1152, 0.00413664713405
acorn, 242, 0.00413664713405
1x1, 58, 0.00413664713405
john, 4878, 0.00413011483827
alway, 457, 0.0041252058251
vcpi, 9441, 0.00403707644654
standalon, 8312, 0.00403707644654
smear, 8059, 0.00403707644654
shoddi, 7897, 0.00403707644654
recipi, 7170, 0.00403707644654
ppmquant, 6788, 0.00403707644654
mitsubishi, 5787, 0.00403707644654
misnom, 5765, 0.00403707644654
microsystem, 5695, 0.00403707644654
macpaint, 5421, 0.00403707644654
keystrok, 4996, 0.00403707644654
ftpmail, 3712, 0.00403707644654
facto, 3351, 0.00403707644654
entropi, 3136, 0.00403707644654
dutch, 2930, 0.00403707644654
dubious, 2904, 0.00403707644654
compli, 1977, 0.00403707644654
chew, 1699, 0.00403707644654
carnegi, 1525, 0.00403707644654
buzz, 1434, 0.00403707644654
bbses, 962, 0.00403707644654
aminet, 475, 0.00403707644654
386max, 95, 0.00403707644654
bad, 861, 0.0040224395742
pretti, 6851, 0.00400475087036
quit, 7043, 0.0040003730946
wonder, 9821, 0.00396596856241
exampl, 3258, 0.00396174320476
windows3, 9775, 0.00395289062979
uwaterloo, 9398, 0.00395289062979
turf, 9154, 0.00395289062979
sune, 8542, 0.00395289062979
subt, 8506, 0.00395289062979
peg, 6506, 0.00395289062979
nifti, 6061, 0.00395289062979
jun, 4930, 0.00395289062979
jpegsrc, 4908, 0.00395289062979
glitch, 3903, 0.00395289062979
flashi, 3525, 0.00395289062979
emit, 3071, 0.00395289062979
displac, 2733, 0.00395289062979
denomin, 2527, 0.00395289062979
512x512, 118, 0.00395289062979
word, 9829, 0.00391227421043
kind, 5021, 0.0038962702085
xv, 9911, 0.00387996555827
weaker, 9670, 0.00387996555827
unsupport, 9317, 0.00387996555827
smoother, 8070, 0.00387996555827
royalti, 7505, 0.00387996555827
pd1, 6491, 0.00387996555827
icon, 4479, 0.00387996555827
hassl, 4196, 0.00387996555827
eyebal, 3338, 0.00387996555827
ega, 3008, 0.00387996555827
aldus, 393, 0.00387996555827
4mb, 111, 0.00387996555827
order, 6281, 0.00386109621268
wsmr, 9875, 0.00381564108648
unus, 9324, 0.00381564108648
squeez, 8278, 0.00381564108648
sixteen, 7996, 0.00381564108648
provis, 6950, 0.00381564108648
pgm, 6581, 0.00381564108648
painless, 6390, 0.00381564108648
notabl, 6117, 0.00381564108648
harbor, 4166, 0.00381564108648
discret, 2703, 0.00381564108648
aka, 370, 0.00381564108648
thought, 8887, 0.003812209235
second, 7753, 0.00380123171958
comput, 1993, 0.00378676457311
subset, 8499, 0.00375810088572
notifi, 6121, 0.00375810088572
lightwav, 5271, 0.00375810088572
interchang, 4706, 0.00375810088572
ghost, 3864, 0.00375810088572
earliest, 2953, 0.00375810088572
disadvantag, 2674, 0.00375810088572
conjunct, 2045, 0.00375810088572
fact, 3350, 0.00374794048759
warranti, 9646, 0.00370604944267
smallest, 8056, 0.00370604944267
satisfactori, 7634, 0.00370604944267
pronounc, 6917, 0.00370604944267
liabil, 5242, 0.00370604944267
inspect, 4674, 0.00370604944267
wizard, 9811, 0.00365853019821
tsr, 9135, 0.00365853019821
tricki, 9095, 0.00365853019821
invis, 4747, 0.00365853019821
illus, 4510, 0.00365853019821
fetch, 3453, 0.00365853019821
far, 3386, 0.00364857623622
said, 7583, 0.0036359852773
uncompress, 9228, 0.00361481673079
lesser, 5222, 0.00361481673079
hack, 4111, 0.00361481673079
fastest, 3400, 0.00361481673079
click, 1815, 0.00361481673079
classifi, 1792, 0.00361481673079
caution, 1571, 0.00361481673079
artifact, 666, 0.00361481673079
adher, 266, 0.00361481673079
lane, 5110, 0.00357434438146
kit, 5033, 0.00357434438146
incident, 4576, 0.00357434438146
cheapli, 1680, 0.00357434438146
zoom, 9994, 0.00353666552566
volunt, 9579, 0.00353666552566
straightforward, 8423, 0.00353666552566
prone, 6916, 0.00353666552566
netherland, 6012, 0.00353666552566
maker, 5460, 0.00353666552566
inconsist, 4585, 0.00353666552566
incompat, 4582, 0.00353666552566
cray, 2215, 0.00353666552566
risc, 7413, 0.00350141930994
inevit, 4616, 0.00350141930994
gradual, 3980, 0.00350141930994
absenc, 191, 0.00350141930994
640x480, 127, 0.00350141930994
shorter, 7908, 0.00346831057952
optimist, 6275, 0.00346831057952
morph, 5866, 0.00346831057952
imageri, 4516, 0.00346831057952
grayscal, 4013, 0.00346831057952
crucial, 2251, 0.00346831057952
compuserv, 1991, 0.00346831057952
wrap, 9857, 0.00343709483815
vagu, 9406, 0.00343709483815
jpg, 4910, 0.00343709483815
storm, 8419, 0.00340756727987
revis, 7359, 0.00340756727987
mpeg, 5895, 0.00340756727987
fantasi, 3384, 0.00340756727987
drawn, 2863, 0.00340756727987
distinguish, 2747, 0.00340756727987
deliber, 2503, 0.00340756727987
wherea, 9723, 0.00337955463739
valley, 9413, 0.00337955463739
purdu, 6989, 0.00337955463739
pic, 6618, 0.00337955463739
handi, 4148, 0.00337955463739
exploit, 3306, 0.00337955463739
dirti, 2671, 0.00337955463739
cube, 2284, 0.00337955463739
brand, 1270, 0.00337955463739
acquir, 244, 0.00337955463739
weird, 9697, 0.00335290902139
tini, 8941, 0.00335290902139
stabl, 8298, 0.00335290902139
pan, 6404, 0.00335290902139
amus, 485, 0.00335290902139
readm, 7141, 0.00332750319434
frequenc, 3685, 0.00332750319434
fed, 3424, 0.00332750319434
corrupt, 2160, 0.00332750319434
cambridg, 1470, 0.00332750319434
question, 7032, 0.00330622620335
plug, 6697, 0.00330322689571
moder, 5810, 0.00330322689571
microsoft, 5693, 0.00330322689571
beta, 1055, 0.00330322689571
variabl, 9427, 0.00327998394988
usag, 9360, 0.00327998394988
rapid, 7100, 0.00327998394988
newer, 6028, 0.00327998394988
spatial, 8189, 0.00325768996484
sec, 7752, 0.00325768996484
correspond, 2158, 0.00325768996484
balanc, 872, 0.00325768996484
armi, 645, 0.00325768996484
reput, 7300, 0.00323627048246
occasion, 6187, 0.00323627048246
menu, 5633, 0.00323627048246
strict, 8445, 0.00321565947809
meaningless, 5597, 0.00321565947809
joint, 4882, 0.00321565947809
crash, 2212, 0.00321565947809
arbitrari, 604, 0.00321565947809
someth, 8126, 0.0032152449094
hint, 4306, 0.00319579813313
clarif, 1785, 0.00319579813313
analyz, 493, 0.00319579813313
accuraci, 226, 0.00319579813313
utah, 9380, 0.0031766338231
upgrad, 9337, 0.0031766338231
remark, 7266, 0.0031766338231
percent, 6533, 0.0031766338231
mon, 5831, 0.0031766338231
lucki, 5382, 0.0031766338231
kick, 5006, 0.0031766338231
harder, 4170, 0.0031766338231
contend, 2083, 0.0031766338231
concentr, 2001, 0.0031766338231
belt, 1017, 0.0031766338231
tune, 9149, 0.00315811927733
submit, 8491, 0.00315811927733
vast, 9434, 0.00314021187648
tga, 8827, 0.00314021187648
satisfi, 7635, 0.00314021187648
pcx, 6490, 0.00314021187648
oak, 6166, 0.00314021187648
mil, 5712, 0.00314021187648
medium, 5614, 0.00314021187648
henc, 4252, 0.00314021187648
filter, 3481, 0.00314021187648
fashion, 3396, 0.00314021187648
useless, 9364, 0.00312287306161
regardless, 7225, 0.00312287306161
pointer, 6711, 0.00312287306161
plenti, 6692, 0.00312287306161
descend, 2554, 0.00312287306161
pop, 6743, 0.00310606783428
perman, 6550, 0.00310606783428
licens, 5254, 0.00310606783428
fee, 3426, 0.00310606783428
consult, 2076, 0.00310606783428
consequ, 2057, 0.00310606783428
cycl, 2325, 0.00308976433119
bigger, 1083, 0.00308976433119
acknowledg, 239, 0.00308976433119
twice, 9170, 0.00307393346058
reli, 7255, 0.00307393346058
frequent, 3686, 0.00307393346058
candid, 1489, 0.00307393346058
adob, 277, 0.00307393346058
sub, 8482, 0.00305854858982
semi, 7781, 0.00305854858982
alleg, 422, 0.00305854858982
style, 8479, 0.00304358527585
forum, 3620, 0.00302902103154
alter, 449, 0.00302902103154
shoot, 7900, 0.0030148351224
oakland, 6167, 0.0030148351224
expert, 3298, 0.0030148351224
experiment, 3297, 0.0030148351224
4th, 112, 0.0030148351224
task, 8707, 0.00300100838906
switch, 8638, 0.00300100838906
paramet, 6421, 0.00300100838906
deni, 2523, 0.00300100838906
coordin, 2126, 0.00300100838906
transform, 9053, 0.00298752309168
tabl, 8667, 0.00298752309168
sequenc, 7804, 0.00298752309168
properti, 6925, 0.00298752309168
literatur, 5307, 0.00298752309168
join, 4881, 0.00298752309168
host, 4386, 0.00298752309168
feed, 3427, 0.00298752309168
effici, 3006, 0.00298752309168
percentag, 6534, 0.00297436277307
mix, 5788, 0.00297436277307
manual, 5492, 0.00297436277307
doctrin, 2787, 0.00297436277307
varieti, 9431, 0.00296151213793
paint, 6391, 0.00296151213793
identifi, 4486, 0.00296151213793
easier, 2960, 0.00296151213793
complain, 1973, 0.00296151213793
charact, 1661, 0.00296151213793
ancient, 500, 0.00296151213793
instruct, 4684, 0.00294895694601
accomplish, 218, 0.00294895694601
toler, 8974, 0.00293668391727
poster, 6769, 0.00293668391727
port, 6748, 0.00293668391727
bar, 904, 0.00293668391727
anyon, 554, 0.00293508279731
march, 5504, 0.00292468064738
heavi, 4230, 0.00292468064738
motion, 5880, 0.00291293553244
highest, 4294, 0.00291293553244
famili, 3378, 0.00291293553244
3rd, 102, 0.00291293553244
overal, 6337, 0.00290143770155
fulli, 3718, 0.00290143770155
affect, 310, 0.00290143770155
grow, 4066, 0.00289017695631
favor, 3410, 0.00289017695631
block, 1163, 0.00289017695631
workstat, 9840, 0.00287914371651
favorit, 3411, 0.00287914371651
bright, 1311, 0.00287914371651
tel, 8754, 0.00286832897113
pound, 6776, 0.00286832897113
margin, 5507, 0.00286832897113
domain, 2805, 0.00286832897113
histor, 4313, 0.00285772423413
editor, 2997, 0.00285772423413
asid, 687, 0.00285772423413
writer, 9866, 0.00284732150446
somewhat, 8129, 0.00284732150446
core, 2140, 0.00284732150446
safe, 7577, 0.00283711322976
reduc, 7204, 0.00283711322976
profession, 6900, 0.00283711322976
multipl, 5919, 0.00282709227346
clean, 1799, 0.00282709227346
cite, 1774, 0.00282709227346
approxim, 593, 0.00282709227346
worri, 9845, 0.0028172518848
trace, 9028, 0.0028172518848
starter, 8335, 0.0028172518848
magazin, 5432, 0.0028172518848
greater, 4017, 0.0028172518848
expir, 3300, 0.0028172518848
compon, 1980, 0.0028172518848
path, 6461, 0.00280758567148
monitor, 5837, 0.00280758567148
techniqu, 8740, 0.00279808757477
hasn, 4195, 0.00279808757477
visual, 9547, 0.00278875184666
suppli, 8574, 0.002779573029
odd, 6198, 0.002779573029
decis, 2445, 0.002779573029
straight, 8422, 0.0027705459343
prevent, 6853, 0.0027705459343
eric, 3170, 0.0027705459343
volum, 9577, 0.00276166562815
proper, 6924, 0.00276166562815
kept, 4989, 0.00276166562815
extend, 3319, 0.00276166562815
gotten, 3962, 0.00274432681328
necessarili, 5991, 0.00273585956158
gmt, 3917, 0.00273585956158
assist, 705, 0.00272752158595
mechan, 5603, 0.00271930899818
unlik, 9290, 0.00271121808286
truli, 9127, 0.00271121808286
thoma, 8878, 0.00271121808286
tend, 8783, 0.00271121808286
orient, 6290, 0.00271121808286
anonym, 532, 0.00271121808286
trade, 9033, 0.00269538721225
thousand, 8888, 0.002687640603
readi, 7139, 0.002687640603
eventu, 3233, 0.002687640603
argu, 628, 0.002687640603
routin, 7499, 0.00268000234149
desir, 2565, 0.00268000234149
bet, 1054, 0.00266503902752
war, 9635, 0.00265770835645
hundr, 4440, 0.00265770835645
gone, 3943, 0.00265770835645
precis, 6809, 0.00265047478321
initi, 4647, 0.00265047478321
curious, 2297, 0.00265047478321
option, 6276, 0.0026433357692
ibm, 4472, 0.0026433357692
frame, 3643, 0.0026433357692
finish, 3488, 0.0026433357692
industri, 4608, 0.00263628887407
uucp, 9388, 0.00262933175075
impress, 4554, 0.00262933175075
digit, 2642, 0.00262933175075
calcul, 1451, 0.00262933175075
modifi, 5814, 0.0026156778697
lower, 5371, 0.0026156778697
flame, 3518, 0.0026156778697
stay, 8355, 0.00260897684335
basi, 936, 0.00260235704357
approach, 589, 0.00260235704357
outsid, 6332, 0.00259581652474
dark, 2365, 0.00258935341031
easili, 2962, 0.0025829658896
expens, 3294, 0.00257665221471
descript, 2557, 0.00257041069768
wast, 9654, 0.00256423970779
depart, 2535, 0.00256423970779
somewher, 8130, 0.00255210305731
jack, 4808, 0.00255210305731
extra, 3325, 0.00254613439905
doubl, 2828, 0.00254613439905
price, 6857, 0.00254023026808
degre, 2491, 0.00253438928412
appar, 577, 0.00253438928412
lack, 5092, 0.00252861011066
publish, 6974, 0.00252289145322
notic, 6120, 0.00252289145322
million, 5724, 0.00252289145322
concept, 2002, 0.00252289145322
minor, 5745, 0.00251163070798
key, 4994, 0.00250608622589
announc, 524, 0.00250608622589
fall, 3369, 0.00250059746818
structur, 8460, 0.0024897827228
forget, 3604, 0.0024897827228
contribut, 2103, 0.0024897827228
consist, 2061, 0.0024897827228
sent, 7793, 0.0024791779858
addit, 263, 0.0024791779858
pay, 6474, 0.00247395185218
contact, 2078, 0.00247395185218
tom, 8976, 0.00246364726732
throw, 8899, 0.00244854602513
otherwis, 6313, 0.00244854602513
map, 5498, 0.00244854602513
therefor, 8855, 0.00243870563647
pass, 6448, 0.00243870563647
longer, 5337, 0.00243870563647
jay, 4832, 0.00243870563647
intern, 4716, 0.00242903942315
technic, 8737, 0.0024242697265
prove, 6947, 0.0024242697265
locat, 5323, 0.00241954132644
newsgroup, 6032, 0.00241485351401
various, 9432, 0.00241020559833
speak, 8192, 0.00240559690604
saw, 7650, 0.00240559690604
materi, 5543, 0.00240559690604
date, 2391, 0.00240102678067
cut, 2313, 0.00240102678067
attempt, 763, 0.00240102678067
phone, 6601, 0.00239649458209
written, 9867, 0.00238311937982
physic, 6613, 0.00237438116467
entir, 3129, 0.00237438116467
rate, 7108, 0.00237006393433
drive, 2873, 0.00237006393433
updat, 9333, 0.00236578056495
stand, 8311, 0.00236578056495
bodi, 1194, 0.00236578056495
concern, 2004, 0.00236153052953
quot, 7045, 0.0023448536064
add, 260, 0.0023448536064
return, 7346, 0.00233267183453
goe, 3931, 0.00233267183453
fli, 3542, 0.00233267183453
activ, 252, 0.00233267183453
quick, 7036, 0.00232867088773
wrote, 9871, 0.00231684096392
natur, 5966, 0.00231295392405
record, 7184, 0.00230909435467
miss, 5770, 0.00230909435467
involv, 4750, 0.00229019534792
experi, 3295, 0.0022864927792
ray, 7118, 0.00228281514378
observ, 6179, 0.00227192853488
earli, 2951, 0.00226478952087
regard, 7224, 0.00223713162137
plan, 6660, 0.00223043059502
issu, 4793, 0.00222711066507
suppos, 8577, 0.00222053074457
anybodi, 552, 0.00222053074457
perform, 6539, 0.00221727027641
lead, 5172, 0.00221727027641
caus, 1569, 0.00221080716198
explain, 3301, 0.00220760406309
comment, 1936, 0.00219186444936
form, 3610, 0.00218877023827
becom, 983, 0.00218877023827
light, 5267, 0.00217355680899
left, 5193, 0.00217355680899
fan, 3381, 0.00217355680899
technolog, 8743, 0.00217056432591
open, 6258, 0.00216758815072
exact, 3253, 0.00216758815072
claim, 1782, 0.00212753997756
design, 2564, 0.00212205121985
perhap, 6540, 0.00211392014962
agre, 337, 0.00211392014962
appreci, 587, 0.00211123647447
research, 7307, 0.00210063173747
public, 6973, 0.00209801241928
clear, 1803, 0.00209540560386
stuff, 8472, 0.0020928111724
today, 8964, 0.00208765899461
cost, 2169, 0.00207498727078
close, 1830, 0.0020699997768
advanc, 285, 0.00206505741913
opinion, 6266, 0.00204572347817
seen, 7767, 0.00202705065772
week, 9691, 0.0020112197871
noth, 6119, 0.00198723431662
win, 9770, 0.00198510516463
given, 3887, 0.00196018250738
understand, 9246, 0.00195815606055
hope, 4372, 0.00195212144892
state, 8342, 0.00193634773743
certain, 1619, 0.00193247448151
happen, 4159, 0.00192480941821
mayb, 5564, 0.00191164909959
place, 6657, 0.00187051373355
talk, 8684, 0.00184691198947
didn, 2625, 0.00182428811811
person, 6562, 0.00181955971805
play, 6681, 0.00180104517228
possibl, 6765, 0.00179052796261
long, 5336, 0.00172077425971
believ, 1009, 0.0016865111708
game, 3761, 0.00165543211491
day, 2402, 0.00161946014919
thank, 8832, 0.00152940028254
year, 9943, 0.00137252007085
