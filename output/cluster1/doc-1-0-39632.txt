Filename: /home/dev/scikit_learn_data/20news_home/20news-bydate-test/comp.graphics/39632
Truth category: 0 (comp.graphics)
Assigned cluster: 1 (graphic imag file thank program format gif use bit help)

Raw data:
============ START RAW ==========================
From: graeme@labtam.labtam.oz.au (Graeme Gill)
Subject: Re: gamma correction
Organization: Labtam Australia Pty. Ltd., Melbourne, Australia
Summary: Here is a FAQ contribution on gamma:
Lines: 184

In article <1t31meINNrc8@gap.caltech.edu>, madler@cco.caltech.edu (Mark Adler) writes:
> 
> Can someone who knows what they're talking about add a FAQ entry
> on gamma correction?  Thanks.

I get regular questions about gamma correction since I go to great pains to
deal with it properly in xli (the image loader program I maintain).

Here is an explanation I often use to answer these questions.

This might be suitable for inclusion in the FAQ.

	Graeme Gill.

###########################################################################
"A note on gamma correction and images"

Author: Graeme W. Gill
        graeme@labtam.oz.au

Date: 93/5/16


"What is all this gamma stuff anyway ?"
--------------------------------------

Although it would be nice to think that "an image is an image",
there are a lot of complications. Not only are there a whole bunch of
different image formats (gif, jpeg, tiff etc etc), there is a whole
lot of other technical stuff that makes dealing with images a bit
complicated. Gamma is one of those things. If you've ever downloaded
images from BBS or the net, you've probably noticed (with most image
viewing programs) that some images look ok, some look too dark, and some
look too light. "Why is this ?" you may ask. This, is gamma correction
(or the lack of it).

Why do we need gamma correction at all ?
--------------------------------------

Gamma correction is needed because of the nature of CRTs (cathode
ray tubes - the monitors usually used for viewing images). If you
have some sort of real live scene and turn it into a computer
image by measuring the amount of light coming from each point of
the scene, then you have created a "linear" or un-gamma-corrected
image. This is a good thing in many ways because you can manipulate
the image as if the values in the image file were light (ie. adding
and multiplying will work just like real light in the real world).
Now if you take the image file and turn each pixel value into a voltage
and feed it into a CRT, you find that the CRT _doesn't_ give you
an amount of light proportional to the voltage. The amount of light
coming from the phosphor in the screen depends on the the voltage
something like this:

Light_out = voltage ^ crt_gamma

So if you just dump your nice linear image out to a CRT, the image
will look much too dark. To fix this up you have to "gamma correct"
the image first. You need to do the opposite of what the CRT
will do to the image, so that things cancel out, and you get
what you want. So you have to do this to your image:

gamma_corrected_image = image ^ (1/crt_gamma)

For most CRTs, the crt_gamma is somewhere between 1.0 and 3.0.

If that is all it is, why does it seem so complicated ?
-----------------------------------------------------

The problem is that not all display programs do gamma correction.
Also not all sources of images give you linear images (Video cameras
or video signals in general). Because of this, a lot of images
already have some gamma correction done to them, and you are 
rarely sure how much. If you try and display one of those images
with a program that does gamma correction for you, the image gets
corrected twice and looks way to light. If you display one of those
images with a program that doesn't do gamma correction, then it will
look vaguely right, but not perfect, because the gamma correction is
not exactly right for you particular CRT.

Whose fault is all this ?
-----------------------

It is really three things. One is all those display programs
out there that don't do gamma correction properly. Another is
that most image formats don't specify a standard gamma, or
don't have some way or recording what their gamma correction is.
The third thing is that not many people understand what gamma
correction is all about, and create a lot of images with varying
gamma's.

At least two file formats do the right thing.
The Utah Graphics Toolkit .rle format has a semi-standard way of recording
the gamma of an image. The JFIF file standard (that uses JPEG compression)
specifies that the image to be encoded must have a gamma of 1.0 (ie. a
linear image - but not everyone obeys the rules).

Some image loaders (for instance xli - an X11 image utility)
allow you to specify not only the gamma of the monitor you
are using, but the individual gamma values of image you are trying to
view. Other image viewers (eg. xv another X11 image program) and
utilities (eg. the pbm toolkit) provide ways of changing the gamma
of an image, but you have to figure out the overall gamma correction
yourself, allowing for undoing any gamma correction the image has,
and then the gamma correction you need to suite your CRT monitor.

[ Note that xv 2.21 doesn't provide an easy way of modifying the
gamma of an image. You need to adjust the R, G and B curves to the
appropriate gamma in the ColEdit controls. Altering the Intensity
in the HSV controls doesn't do the right thing, as it fails to
take account of the effect gamma has on H and S. This tends
to give a tint to the image. ]

How can I figure out what my viewer does, or what gamma my screen has ?
---------------------------------------------------------------------

The simplest way to do that is to try loading the file chkgamma.jpg
(provided with xli distribution), which is a JFIF jpeg format file
containing two grayscale ramps. The ramps are chosen to look linear
to the human eye, one using continuous tones, and the other using
dithering.  If your viewer does the right thing and gamma corrects
images, then the two ramps should look symmetrical, and the point
at which they look equally bright should be almost exactly half
way from the top to the bottom. (To find this point it helps if
you move away a little from the screen, and de-focus your eyes a
bit.)

If your viewer doesn't do gamma correction, then left hand ramp will have
a long dark part and a short white part, and the point of equal brightness
will be above the center.

If your viewer does have a way of setting the right amount of gamma correction
for a display, then if the equal brightness point is above center increase the
gamma, and decrease it if it is below the center. The value will usually be
around 2.2 

[with xli for instance, you can adjust the display gamma with the
-dispgamma flag, and once you've got it right, you can set the DISPLAY_GAMMA
environment variable in your .profile]

How do I figure out what the gamma of an image is ?
-------------------------------------------------

This is the most tricky bit. As a general rule it seems that a lot of
true color (ie. 24 bit, .ppm .jpg) images have a gamma of
1.0 (linear), although there are many about that have some gamma
correction. It seems that the majority of pseudo color images
(ie. 8 bit images with color maps - .gif etc.) are gamma corrected
to some degree or other.

If your viewer does gamma correction then linear images will
look good, and gamma corrected images will look too light.

If your viewer doesn't do gamma correction, then linear images will
look too dark, and gamma corrected images will ok.

Why Linear images are sometimes not such a good thing
-----------------------------------------------------

One of the reason that many high quality formats (such as
Video) use gamma correction is that it actually makes better
use of the storage medium. This is because the human
eye has a logarithmic response to light, and gamma correction
has a similar compression characteristic. This means images 
could make better use of 8 bits per color (for instance),
if they used gamma correction. The implication though, is that
every time you want to do any image processing you should
convert the 8 bit image to 12 or so linear bits to retain
the same accuracy. Since little popular software does this, and
none of the popular image formats can agree on a standard
gamma correction factor, it is difficult to justify gamma corrected
images at the popular level.

If some image formats can standardize on a particular gamma,
and if image manipulation software takes care to use
extra precision when dealing with linearized internal data,
then gamma corrected distribution of images would be a good thing.

(I am told that the Kodak PhotoCD format for instance, has a
standard gamma correction factor that enables it to get the
highest quality out of the bits used to hold the image).

###########################################################################



========== END RAW ============================

Preprocessed:
============ START PREPROCESSED =================
 gamma correct  faq contribut gamma     someon
know they'r talk add faq entri gamma correct thank
get regular question gamma correct sinc great pain
deal proper xli imag loader program maintain
explan often use answer question  might suitabl
inclus faq  graem gill   note gamma correct imag
author graem gill      gamma stuff anyway
although nice think imag imag lot complic whole
bunch differ imag format gif jpeg tiff etc etc
whole lot technic stuff make deal imag bit complic
gamma one thing you'v ever download imag bbs net
you'v probabl notic imag view program imag look
look dark look light ask gamma correct lack  need
gamma correct   gamma correct need natur crts
cathod ray tube monitor usual use view imag sort
real live scene turn comput imag measur amount
light come point scene creat linear gamma correct
imag good thing mani way manipul imag valu imag
file light ad multipli work like real light real
world take imag file turn pixel valu voltag feed
crt find crt doesn't give amount light proport
voltag amount light come phosphor screen depend
voltag someth like  light voltag crt gamma  dump
nice linear imag crt imag look much dark fix gamma
correct imag first need opposit crt imag thing
cancel get want imag  gamma correct imag imag crt
gamma  crts crt gamma somewher  seem complic
problem display program gamma correct also sourc
imag give linear imag video camera video signal
general lot imag alreadi gamma correct done rare
sure much tri display one imag program gamma
correct imag get correct twice look way light
display one imag program doesn't gamma correct
look vagu right perfect gamma correct exact right
particular crt  whose fault   realli three thing
one display program don't gamma correct proper
anoth imag format don't specifi standard gamma
don't way record gamma correct third thing mani
peopl understand gamma correct creat lot imag vari
gamma  least two file format right thing utah
graphic toolkit rle format semi standard way
record gamma imag jfif file standard use jpeg
compress specifi imag encod must gamma linear imag
everyon obey rule  imag loader instanc xli x11
imag util allow specifi gamma monitor use individu
gamma valu imag tri view imag viewer anoth x11
imag program util pbm toolkit provid way chang
gamma imag figur overal gamma correct allow undo
gamma correct imag gamma correct need suit crt
monitor  note doesn't provid easi way modifi gamma
imag need adjust curv appropri gamma coledit
control alter intens hsv control doesn't right
thing fail take account effect gamma tend give
tint imag  figur viewer gamma screen   simplest
way tri load file chkgamma jpg provid xli
distribut jfif jpeg format file contain two
grayscal ramp ramp chosen look linear human eye
one use continu tone use dither viewer right thing
gamma correct imag two ramp look symmetr point
look equal bright almost exact half way top bottom
find point help move away littl screen focus eye
bit  viewer doesn't gamma correct left hand ramp
long dark part short white part point equal bright
center  viewer way set right amount gamma correct
display equal bright point center increas gamma
decreas center valu usual around  xli instanc
adjust display gamma dispgamma flag you'v got
right set display gamma environ variabl profil
figur gamma imag   tricki bit general rule seem
lot true color bit ppm jpg imag gamma linear
although mani gamma correct seem major pseudo
color imag bit imag color map gif etc gamma
correct degre  viewer gamma correct linear imag
look good gamma correct imag look light  viewer
doesn't gamma correct linear imag look dark gamma
correct imag  linear imag sometim good thing   one
reason mani high qualiti format video use gamma
correct actual make better use storag medium human
eye logarithm respons light gamma correct similar
compress characterist mean imag could make better
use bit per color instanc use gamma correct implic
though everi time want imag process convert bit
imag linear bit retain accuraci sinc littl popular
softwar none popular imag format agre standard
gamma correct factor difficult justifi gamma
correct imag popular level  imag format standard
particular gamma imag manipul softwar take care
use extra precis deal linear intern data gamma
correct distribut imag good thing  told kodak
photocd format instanc standard gamma correct
factor enabl get highest qualiti bit use hold imag
========== END PREPROCESSED =====================


Feature vector (sorted, non-zero values only):
Term, Index, Value:
gamma, 3762, 0.6814332359
imag, 4512, 0.474565467943
correct, 2156, 0.339653921137
crt, 2248, 0.162876969058
linear, 5286, 0.15332879326
light, 5267, 0.0923698651344
format, 3612, 0.0835970738453
viewer, 9512, 0.0804160632507
ramp, 7088, 0.0750604669955
voltag, 9575, 0.072389764026
bit, 1122, 0.0704511025038
display, 2734, 0.0700007965218
look, 5341, 0.0695039036003
thing, 8869, 0.0634042942081
use, 9363, 0.0615091416666
xli, 9901, 0.0607597109207
standard, 8313, 0.0570429662476
way, 9666, 0.0546402605844
program, 6905, 0.0504284596865
right, 7399, 0.0494195044832
instanc, 4680, 0.0485779991591
file, 3477, 0.0481866422852
doesn, 2793, 0.0451706187054
dark, 2365, 0.0440160062634
specifi, 8204, 0.0388030660565
complic, 1978, 0.0382602477679
valu, 9414, 0.037971514616
crts, 2249, 0.0375302334978
color, 1907, 0.0373120524236
bright, 1311, 0.0367065791467
lot, 5356, 0.0362077160899
monitor, 5837, 0.0357942762879
jpeg, 4905, 0.0356731838129
loader, 5318, 0.0351591029322
graem, 3982, 0.0343128098021
jfif, 4865, 0.033597279156
popular, 6746, 0.0335216937794
equal, 3156, 0.0330944037872
point, 6710, 0.0327552057947
eye, 3337, 0.0326918268252
faq, 3385, 0.0325370950838
screen, 7719, 0.0323857273438
gill, 3877, 0.0319416792366
video, 9506, 0.0315407351661
need, 5993, 0.0312006442428
figur, 3476, 0.0295876195635
jpg, 4910, 0.0292133138956
toolkit, 8989, 0.0287242555409
deal, 2418, 0.0281450324281
center, 1606, 0.0281044338186
view, 9510, 0.0271949722745
x11, 9883, 0.0271624317647
scene, 7671, 0.0263997762345
mani, 5479, 0.0263333287704
provid, 6949, 0.0257559176293
compress, 1986, 0.0240286456689
adjust, 269, 0.0240286456689
real, 7144, 0.0238694226925
good, 3948, 0.0238639581432
manipul, 5483, 0.0238628508586
proper, 6924, 0.0234725571067
qualiti, 7017, 0.0223477958529
factor, 3352, 0.0222894081496
util, 9384, 0.0217945512168
distribut, 2753, 0.0217426874235
tri, 9087, 0.0201644871673
record, 7184, 0.0196259636041
usual, 9377, 0.0195933897076
gif, 3869, 0.0195933897076
particular, 6442, 0.0194338633131
rule, 7537, 0.019371556858
control, 2107, 0.019371556858
nice, 6047, 0.0187905794361
turn, 9158, 0.0184739730269
exact, 3253, 0.0184232428912
logarithm, 5329, 0.0180974410065
creat, 2217, 0.017944286306
human, 4432, 0.0179215881619
general, 3818, 0.0179215881619
stuff, 8472, 0.0177876819181
allow, 432, 0.0177876819181
symmetr, 8645, 0.0175795514661
cathod, 1563, 0.0175795514661
make, 5459, 0.0174632281925
tone, 8981, 0.0171564049011
note, 6118, 0.0167475051476
set, 7815, 0.0166260315669
inclus, 4580, 0.0164887291587
hsv, 4417, 0.0164887291587
pseudo, 6959, 0.0159708396183
don, 2811, 0.0157928888405
retain, 7337, 0.0157496360705
littl, 5308, 0.0156005408417
tricki, 9095, 0.0155476930532
profil, 6902, 0.0155476930532
multipli, 5920, 0.0155476930532
implic, 4547, 0.0155476930532
softwar, 8103, 0.0154919566807
proport, 6932, 0.0153619234854
obey, 6171, 0.0153619234854
pbm, 6482, 0.0151899277302
anoth, 533, 0.0149601660453
grayscal, 4013, 0.0147393148019
vagu, 9406, 0.0146066569478
rle, 7425, 0.0146066569478
cancel, 1487, 0.0144811733826
flag, 3515, 0.0143621277705
encod, 3086, 0.0143621277705
dither, 2757, 0.0142488916247
sinc, 7977, 0.0141499022905
storag, 8416, 0.0141409242227
question, 7032, 0.0140505031773
ppm, 6787, 0.0140377569891
variabl, 9427, 0.0139389812054
suitabl, 8530, 0.0139389812054
decreas, 2456, 0.0139389812054
better, 1060, 0.0138862614015
tube, 9142, 0.0137532116376
enabl, 3083, 0.0137532116376
download, 2843, 0.0136656208423
accuraci, 226, 0.0135812158823
utah, 9380, 0.0134997731188
come, 1923, 0.0134602792161
dump, 2916, 0.013421091665
chosen, 1727, 0.013421091665
characterist, 1663, 0.013421091665
medium, 5614, 0.0133449904012
rare, 7101, 0.0131998881172
twice, 9170, 0.0130633263419
focus, 3569, 0.0130633263419
camera, 1473, 0.0130633263419
semi, 7781, 0.0129979451
intens, 4701, 0.0129343553522
alter, 449, 0.0128724615348
pain, 6389, 0.0128121755322
explan, 3302, 0.0127534159226
vari, 9426, 0.012696107317
feed, 3427, 0.012696107317
want, 9634, 0.0126443954867
fault, 3407, 0.0124290451413
curv, 2306, 0.0124290451413
highest, 4294, 0.0123791318067
entri, 3135, 0.0123791318067
overal, 6337, 0.0123302693576
justifi, 4939, 0.0122355263822
opposit, 6270, 0.0121895668486
bunch, 1399, 0.0121895668486
appropri, 590, 0.0121895668486
signal, 7947, 0.0119725040345
bbs, 961, 0.0119314254293
suit, 8529, 0.0116991436715
pixel, 6651, 0.0116991436715
tiff, 8926, 0.0115218911062
tend, 8783, 0.0115218911062
fix, 3511, 0.0114216936499
difficult, 2635, 0.0112944902768
precis, 6809, 0.0112637496869
account, 221, 0.0111447040748
modifi, 5814, 0.0111158728891
maintain, 5454, 0.0111158728891
fail, 3360, 0.0110314679291
somewher, 8130, 0.0108456983613
extra, 3325, 0.0108203332934
load, 5317, 0.0107952424479
environ, 3139, 0.0107952424479
regular, 7234, 0.0107704199588
degre, 2491, 0.0107704199588
lack, 5092, 0.0107458601465
notic, 6120, 0.0107215575098
contribut, 2103, 0.0105808550008
half, 4124, 0.0105135783887
measur, 5601, 0.0104697868894
increas, 4590, 0.0104697868894
told, 8973, 0.0104481971467
map, 5498, 0.0104056109866
depend, 2537, 0.0103637921867
intern, 4716, 0.0103227135815
technic, 8737, 0.010302443753
easi, 2959, 0.0102426752843
sometim, 8128, 0.0102036679694
contain, 2079, 0.0102036679694
perfect, 6538, 0.0101463593637
individu, 4604, 0.0101463593637
hold, 4341, 0.0101463593637
add, 260, 0.00996494825842
ad, 257, 0.00996494825842
white, 9737, 0.00994756330368
natur, 5966, 0.0098293838534
continu, 2092, 0.00979669485378
like, 5272, 0.00977375802813
ray, 7118, 0.00970130277185
similar, 7961, 0.00960967716515
level, 5229, 0.00952153186492
author, 796, 0.00952153186492
process, 6890, 0.00938167747605
net, 6010, 0.0093413133177
convert, 2115, 0.00932801310591
effect, 3005, 0.00930163917886
alreadi, 443, 0.00930163917886
everyon, 3241, 0.00924977376675
left, 5193, 0.00923698651344
away, 833, 0.00919904211614
short, 7904, 0.00917408617025
care, 1516, 0.00913714829871
agre, 337, 0.00898354799463
respons, 7323, 0.00893826108255
sort, 8144, 0.00892707609413
data, 2385, 0.00859495612155
sourc, 8153, 0.00856612493582
answer, 535, 0.00856612493582
major, 5458, 0.00851885485772
live, 5310, 0.00850951528533
hand, 4145, 0.00841813022802
chang, 1650, 0.00833885145586
understand, 9246, 0.00832159575849
true, 9121, 0.00827900959843
comput, 1993, 0.00804632599128
ask, 689, 0.00803870404484
everi, 3235, 0.00794914126863
talk, 8684, 0.00784884069639
high, 4292, 0.00784884069639
world, 9841, 0.00777296562822
great, 4016, 0.00771930125809
graphic, 3997, 0.00764106191893
got, 3960, 0.00761555747979
probabl, 6885, 0.00759033026832
someon, 8124, 0.00758406607934
reason, 7156, 0.0074860723953
sure, 8585, 0.00747410906672
actual, 254, 0.00746220708882
long, 5336, 0.00731279190124
problem, 6887, 0.00730168718816
mean, 5595, 0.00717241680719
differ, 2633, 0.00714636849105
realli, 7150, 0.00688686417276
someth, 8126, 0.00683192952278
help, 4249, 0.00681839665292
work, 9833, 0.00657521721718
thank, 8832, 0.00649950796089
peopl, 6530, 0.0062969116345
time, 8936, 0.00551446053071
think, 8871, 0.00531551137071
know, 5052, 0.00499913691717
